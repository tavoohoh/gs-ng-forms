import * as tslib_1 from "tslib";
import { GFieldValidatorType } from './gs-forms.enums';
/**
 * Default field configuration
 */
var GFieldConfiguration = /** @class */ (function () {
    function GFieldConfiguration() {
        /**
         * Dynamically display/hide this field by setting this property
         */
        this.displayIf = null;
    }
    return GFieldConfiguration;
}());
export { GFieldConfiguration };
/**
 * Field configuration for only string fields
 */
var GFieldStringConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldStringConfiguration, _super);
    function GFieldStringConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldStringConfiguration;
}(GFieldConfiguration));
export { GFieldStringConfiguration };
/**
 * Field configuration for only string fields
 */
var GFieldMapConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldMapConfiguration, _super);
    function GFieldMapConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldMapConfiguration;
}(GFieldConfiguration));
export { GFieldMapConfiguration };
/**
 * Field configuration for only number fields
 */
var GFieldNumberConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldNumberConfiguration, _super);
    function GFieldNumberConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldNumberConfiguration;
}(GFieldConfiguration));
export { GFieldNumberConfiguration };
/**
 * Field configuration for only boolean fields
 */
var GFieldBooleanConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldBooleanConfiguration, _super);
    function GFieldBooleanConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldBooleanConfiguration;
}(GFieldConfiguration));
export { GFieldBooleanConfiguration };
/**
 * Field configuration including option values for `GRadioField` and `GDropdownField`
 */
var GFieldOptionValuesConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldOptionValuesConfiguration, _super);
    function GFieldOptionValuesConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldOptionValuesConfiguration;
}(GFieldConfiguration));
export { GFieldOptionValuesConfiguration };
/**
 * Field configuration including country option for `GCurrencyField` and `GPhoneField`
 */
var GFieldCountryFormmatConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldCountryFormmatConfiguration, _super);
    function GFieldCountryFormmatConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldCountryFormmatConfiguration;
}(GFieldConfiguration));
export { GFieldCountryFormmatConfiguration };
/**
 * Field configuration for `GFieldFile`
 */
var GFieldFileConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldFileConfiguration, _super);
    function GFieldFileConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldFileConfiguration;
}(GFieldConfiguration));
export { GFieldFileConfiguration };
/**
 * Field configuration for `GTwoDataInput`
 */
var GFieldTwoDataConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldTwoDataConfiguration, _super);
    function GFieldTwoDataConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldTwoDataConfiguration;
}(GFieldConfiguration));
export { GFieldTwoDataConfiguration };
/**
 * Field configuration for `GDivider`
 */
var GFieldDividerConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldDividerConfiguration, _super);
    function GFieldDividerConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldDividerConfiguration;
}(GFieldConfiguration));
export { GFieldDividerConfiguration };
/**
 * Field configuration for `GButton`
 */
var GFieldButtonConfiguration = /** @class */ (function (_super) {
    tslib_1.__extends(GFieldButtonConfiguration, _super);
    function GFieldButtonConfiguration() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GFieldButtonConfiguration;
}(GFieldConfiguration));
export { GFieldButtonConfiguration };
//# sourceMappingURL=data:application/json;base64,