{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@gs/ng-forms/lib/gs-forms.enums.ts","ng://@gs/ng-forms/lib/gs-forms.widgets.ts","ng://@gs/ng-forms/lib/gs-fields/datepicker/datepicker.component.ts","ng://@gs/ng-forms/lib/gs-forms.models.ts","ng://@gs/ng-forms/lib/gs-forms.constants.ts","ng://@gs/ng-forms/lib/gs-forms.service.ts","ng://@gs/ng-forms/lib/gs-fields/_generic-field/_generic-field.component.ts","ng://@gs/ng-forms/lib/gs-fields/checkbox/checkbox.component.ts","ng://@gs/ng-forms/lib/gs-fields/currency-input/currency-input.component.ts","ng://@gs/ng-forms/lib/gs-fields/two-data-input/two-data-input.component.ts","ng://@gs/ng-forms/lib/gs-fields/dropdown/dropdown.component.ts","ng://@gs/ng-forms/lib/gs-fields/number-input/number-input.component.ts","ng://@gs/ng-forms/lib/gs-fields/password-input/password-input.component.ts","ng://@gs/ng-forms/lib/gs-fields/phone-input/phone-input.component.ts","ng://@gs/ng-forms/lib/gs-fields/radio-button/radio-button.component.ts","ng://@gs/ng-forms/lib/gs-fields/text-input/text-input.component.ts","ng://@gs/ng-forms/lib/gs-fields/textarea/textarea.component.ts","ng://@gs/ng-forms/lib/gs-fields/toggle/toggle.component.ts","ng://@gs/ng-forms/lib/gs-fields/separated-by-comma/separated-by-comma.component.ts","ng://@gs/ng-forms/lib/gs-fields/file-input/file-input.component.ts","ng://@gs/ng-forms/lib/gs-fields/multiselect/multiselect.component.ts","ng://@gs/ng-forms/lib/gs-fields/color-picker/color-picker.component.ts","ng://@gs/ng-forms/lib/gs-fields/map-field/map-field.component.ts","ng://@gs/ng-forms/lib/gs-fields/divider/divider.component.ts","ng://@gs/ng-forms/lib/gs-fields/button/button.component.ts","ng://@gs/ng-forms/lib/gs-fields/show-data/show-data.component.ts","ng://@gs/ng-forms/lib/gs-fields/timepicker/timepicker.component.ts","ng://@gs/ng-forms/lib/gs-form.component.ts","ng://@gs/ng-forms/lib/gs-directives/digit-only/digit-only.directive.ts","ng://@gs/ng-forms/lib/gs-directives/click-outside/click-outside.directive.ts","ng://@gs/ng-forms/lib/gs-forms.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","GFieldSelector","GFieldValueType","GFieldValidatorType","GFieldCountryCode","GFieldValueButtonType","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","call","next","value","done","__read","n","e","ar","push","error","__spread","concat","ShowSelector","GTextField","config","selector","TEXT","GTextareaField","TEXTAREA","GPasswordField","PASSWORD","GNumberField","NUMBER","GToggleField","TOGGLE","GCheckboxField","CHECKBOX","GRadioField","RADIO","GDropdownField","DROPDOWN","GTaxDocumentTypeField","TAX_TYPE","GCurrencyField","CURRENCY","GPhoneField","PHONE","GDatePickerField","DATE","GSeparatedByComma","COMMA","GFieldFile","FILE","GTwoDataInput","TWO_DATA","GMultiselectField","MULTISELECT","GColorPickerField","COLOR","GMapField","MAP","GTimeField","TIME","GDivider","DIVIDER","notWidget","GButton","BUTTON","GShowData","SHOW_DATA","GFieldConfiguration","displayIf","GFieldStringConfiguration","_super","tslib_1.__extends","GFieldMapConfiguration","GFieldNumberConfiguration","GFieldBooleanConfiguration","GFieldOptionValuesConfiguration","GFieldCountryFormmatConfiguration","GFieldFileConfiguration","GFieldTwoDataConfiguration","GFieldDividerConfiguration","GFieldButtonConfiguration","LOCATION","tax","name","country","alpha2Code","phoneFormat","code","mask","currencyFormat","symbol","thousands","decimal","precision","bo","br","ca","disabled","cl","co","lanLng","lat","lng","cr","ec","mx","pe","us","uy","ve","VALIDATION_MESSAGES","en","ERR_MIN","ERR_MAX","ERR_REQUIRED","ERR_EMAIL","ERR_MIN_LENGTH","ERR_MAX_LENGTH","ERR_PATTERN","DEFAULT","ERR_REQUIRED_TWO_DATA_RIGHT","ERR_REQUIRED_TWO_DATA_LEFT","ERR_REQUIRED_MIN","ERR_REQUIRED_HOUR","ERR_REQUIRED_FULLTIME","ERR_PATTERN_MIN","ERR_PATTERN_HOUR","ERR_PATTERN_FULLTIME","es","MESSAGES","SELECT_ADDRESS","GsFormsService","formBuilder","translateService","http","buildErrors","validator","MIN","Validators","min","MAX","max","REQUIRED","required","EMAIL","email","MIN_LENGTH","minLength","MAX_LENGTH","maxLength","PATTERN","pattern","setDefaultFormObject","field","formObject","hasValidators","model","validators","fields","compose","buildForm","formField","formField_1","tslib_1.__values","formField_1_1","group","fieldError","errors","getValidationMessage","requiredLength","param","lang","currentLang","console","warn","messageLang","message","replace","getMessage","getLang","getDefaultLang","uploadFileServices","url","method","file","paramName","formData","FormData","append","mapFieldOptionValues","options","optionValue","optionText","map","obj","text","patchFormValues","formFields","formValues","resetForm","resetFields","getAddress","lan","apikey","get","FormBuilder","TranslateService","HttpClient","Injectable","providedIn","GsGenericFieldComponent","formsService","fieldValidatorType","validateField","$event","formGroup","controls","dirty","getFieldError","tslib_1.__decorate","Input","Component","template","GsCheckboxComponent","ngOnChanges","changes","currentValue","GsCurrencyInputComponent","_this","apply","location","countryGlobal","returnBuildingError","prefix","suffix","thousandsSeparator","decimalSeparator","toString","formatCurrency","keyup","inputVal","markAsDirty","substring","emptyDecimals","index","cleanValue","decimals","slice","Number","formattedThousands","controlValue","setTimeout","patchValue","updateValueAndValidity","MONTHS","pr","WEEKDAYS","TwoDataInputErrors","GsDatePickerComponent","daysInPreviousMonthWeek","daysInCurrentMonth","daysInNextMonthWeek","selectedDate","Date","date","showSelector","DAY","showSelectorType","yearUiArray","yearMultiplier","showDatePickerSelector","ngOnInit","months","weekdays","dateValue","split","setCalendar","currentMonth","getUTCMonth","currentYear","getUTCFullYear","getDaysInCalendar","changeMonth","setMonth","navigateSelectors","YEAR","changeYear","daysOfCurrentMonth","getUTCDate","currentMonthDays","day","status","getPreviousMonth","getNextMonth","daysOfBeforeMonth","firstDayOfCurrentMonth","getDay","previousWeekDays","reverse","lastDayOfMonth","nextWeekDays","selectDate","formatDate","toggleDatePickerSelector","selectMonth","month","selectYear","year","setFullYear","MONTH","toggleSelector","disableKeys","join","resetField","GsDropdownComponent","fieldOption","optionValues","dropdownTextValue","placeholder","label","setDropdownValue","changeValue","option","find","elem","GsNumberInputComponent","setPresicion","input","pointIndex","indexOf","valueLeft","substr","valueRight","GsPasswordInputComponent","toggleInputType","toggle","GsPhoneInputComponent","showCountryOptions","touched","invalid","phoneMask","phoneValue","startsWith","phone","countryCode","toLowerCase","updatePhoneMask","editCountry","countryCodeOptions","setCountryCodeOptions","formatPhone","j","patternLength","oldString","newString","sRegEx","RegExp","cleanString","toggleCountryOptions","close","errorText","ViewChild","static","GsRadioButtonComponent","GsTextInputComponent","GsTextareaComponent","GsToggleComponent","GsSeparatedByCommaComponent","focusInput","inputElement","nativeElement","focus","removeValue","valIndex","splice","disableEnter","event","preventDefault","removeLastValue","keyCode","pop","removeAll","addValue","valuesAsString","GsFileInputComponent","fieldChanged","EventEmitter","loading","supportedFilesTranslates","pt","supportedSizeFilesTranslates","errorTranslates","supportedFilesText","supportedSizeFilesText","selectedFile","returnFile","size","onFileChange","reader","FileReader","files","validFileType","validFileSize","match","readAsDataURL","onload","emit","processFile","api","fileParamName","addEventListener","subscribe","response","setErrors","unableToUploadFile","returnFileSize","toFixed","accept","includes","type","Output","GsTwoDataInputComponent","valueType","rightFieldTouched","leftFieldTouched","leftFieldValue","left","rightFieldValue","right","leftFieldType","rightFieldType","leftFieldPlaceholder","rightFieldPlaceholder","setGrid","grid","grid-template-columns","onUpdateValue","updatedValue","checkMinMaxValidator","requiredText","validateRequired","GsMultiselectComponent","noSelection","showMultiselectOptions","forEach","toggleOption","selectedOptions","exists","toggleMultiselectOptions","GsColorPickerComponent","setColorValue","WINDOW","window","GsMapFieldComponent","showMap","showMapModal","latlng","address","addressInput","city","selectAddress","setLanLngGeolocation","valid","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","valueGoogleSearch","loadMap","toggleMap","mapElement","hasChildNodes","google","maps","Map","center","zoom","disableDefaultUI","mapTypeId","marker","Marker","getSearchAddress","addListener","mapsMouseEvent","latLng","addMarker","searchBox","places","SearchBox","search","getPlaces","bounds","LatLngBounds","place","geometry","viewport","union","extend","fitBounds","formatted_address","setMap","googleMapApiKey","results","patch","addressValue","fullAddress","selectAddressText","GsDividerComponent","GsButtonComponent","hdlAction","fieldValueButtonType","action","id","button","GsShowDataComponent","fieldValue","data","GsTimePickerComponent","fieldTouchedHours","fieldTouchedMinutes","validateFormatHours","validateFormatMinutes","validateRequiredHours","validateRequiredMinutes","errorsTextArray","requiredMinutes","requiredHours","requiredFulltime","patternMinutes","patternHours","patternFulltime","fieldValueHours","fieldValueMinutes","isMinuteInput","fullTime","hour","undefined","GsFormComponent","sanitizer","cdRef","customStyles","destroyed$","Subject","form","formChanges","customButtonClick","fieldSelector","reset","onFormChanges","ngAfterViewChecked","detectChanges","valueChanges","pipe","takeUntil","fieldWithDisplay","clearValidators","submit","canSubmit","formOptions","onErrorDisableSubmit","isRequired","sanitizeStyle","bypassSecurityTrustStyle","checkCondition","hasValue","setValidators","variables","color","font","primary","secondary","neutral","border","white","ui","fontSize","padding","disabledOpacity","background","borderSize","borderStyle","borderColor","borderRadius","borderTop","borderRight","borderBottom","borderLeft","primaryButton","secondaryButton","layout","columns","innerPadding","formActions","SUBMIT","RESET","fileInputComponent","el","datePickerComponent","dropdownComponent","CUSTOM","onFieldChanged","DomSanitizer","ChangeDetectorRef","Inject","args","ViewChildren","HostBinding","tslib_1.__param","DigitOnlyDirective","decimalCounter","navigationKeys","onKeyDown","ctrlKey","metaKey","isNaN","onKeyUp","onPaste","pastedInput","clipboardData","getData","pasted","isValidDecimal","document","execCommand","clipboard","writeText","onDrop","textData","dataTransfer","str","ElementRef","HostListener","Directive","ClickOutsideDirective","elementRef","clickOutside","onMouseEnter","targetElement","contains","directive","widgets","GsFormsModule","forRoot","styles","getElementById","googleScript","createElement","defer","async","src","body","appendChild","ngModule","GsFormsModule_1","providers","provide","useValue","NgModule","declarations","imports","CommonModule","TranslateModule","FormsModule","ReactiveFormsModule","HttpClientModule","exports","schemas","NO_ERRORS_SCHEMA"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum GFieldSelector {\n\n  /**\n   * Any string value:\n   * For example: text, email, address, etc.\n   * <input type=\"text\"/>\n   */\n  TEXT = 'text',\n\n  /**\n   * Any long string value:\n   * <textarea>\n   */\n  TEXTAREA = 'textarea',\n\n  /**\n   * Any sensitive value:\n   * For example: password, token, etc.\n   * <input type=\"password\"/>\n   * This will create a non native password type input with an eye button to toggle the input type from password to text.\n   */\n  PASSWORD = 'password',\n\n  /**\n   * Any numeric value:\n   * For example: age or quantity.\n   * <input type=\"number\"/>\n   */\n  NUMBER = 'number',\n\n  /**\n   * Any boolean value:\n   * For example: A true or false question.\n   * This will create a non native toggle type input\n   */\n  TOGGLE = 'toggle',\n\n  /**\n   * Any boolean value:\n   * For example: A true or false question.\n   * This will create a non native checkbox type input\n   */\n  CHECKBOX = 'checkbox',\n\n  /**\n   * Any array of options:\n   * For example: gender selection.\n   * This will create a non native radio type input for each option.\n   */\n  RADIO = 'radio',\n\n  /**\n   * Any array of options:\n   * For example: select and its options.\n   */\n  DROPDOWN = 'dropdown',\n\n  /**\n   * Tax type selector\n   */\n  TAX_TYPE = 'tax_type',\n\n  /**\n   * Any currency value:\n   * For example: any masked string formatted as currency value ($ 1.300,20)\n   * This will create a non native currency type input with currency format and symbol.\n   *\n   * Requires `currency pattern` and `currency symbol`.\n   */\n  CURRENCY = 'currency',\n\n  /**\n   * Any phone value:\n   * For example: any masked string formatted as phone value (+57 300 123 0031)\n   * This will create a non native phone type input.\n   *\n   * Requires `country code`.\n   */\n  PHONE = 'phone',\n\n  /**\n   * Any date value\n   * This will create a non native date picker\n   */\n  DATE = 'date',\n\n  /**\n   * Separated by comma field\n   */\n  COMMA = 'comma',\n\n  /**\n   * Any type file\n   * For Example: .pdf, .doc, .xml, etc\n   * <input type=\"file\"/>\n   */\n  FILE = 'file',\n\n  /**\n   * Two data input\n   * Creates a two inputs field\n   */\n  TWO_DATA = 'two_data',\n\n  /**\n   * Multiselect field\n   */\n  MULTISELECT = 'multiselect',\n\n  /**\n   * Any string value:\n   * For example: color string.\n   * <input type=\"color\"/>\n   */\n  COLOR = 'color',\n\n  /**\n   * Map input\n   * Get latitude and longitude using Google Maps\n   */\n  MAP = 'map',\n\n  /**\n   * TimePicker Input\n   * Any time value\n   */\n  TIME = 'time',\n\n  /**\n   * Divider\n   * This is not a field, it is a component to divide your form in sections\n   */\n  DIVIDER = 'divider',\n\n  /**\n   * Button\n   * This is not a field, it is a normal button to save, reset or anything else\n   */\n  BUTTON = 'button',\n\n  /**\n   * Show data\n   * This looks like a text field but is not.\n   * This is really useful to display a field like it was disabled but without the issue of having your input tag edited in the dom.\n   */\n  SHOW_DATA = 'show_data'\n}\n\nexport enum GFieldValueType {\n  STRING = 'string',\n  NUMBER = 'number'\n}\n\nexport enum GFieldValidatorType {\n  MIN = 'min',\n  MAX = 'max',\n  REQUIRED = 'required',\n  EMAIL = 'email',\n  MIN_LENGTH = 'minlength',\n  MAX_LENGTH = 'maxlength',\n  PATTERN = 'pattern'\n}\n\nexport enum GFieldCountryCode {\n  AR = 'ar',\n  BO = 'bo',\n  BR = 'br',\n  CA = 'ca',\n  CL = 'cl',\n  CO = 'co',\n  CR = 'cr',\n  EC = 'ec',\n  MX = 'mx',\n  PE = 'pe',\n  US = 'us',\n  UY = 'uy',\n  VE = 've'\n}\n\nexport enum GFieldValueButtonType {\n  SUBMIT = 'submit',\n  RESET = 'reset',\n  CUSTOM = 'custom'\n}\n","import { GFieldSelector } from './gs-forms.enums';\nimport {\n  GField,\n  GFieldConfiguration,\n  GFieldOptionValuesConfiguration,\n  GFieldCountryFormmatConfiguration,\n  GFieldBooleanConfiguration,\n  GFieldNumberConfiguration,\n  GFieldFileConfiguration,\n  GFieldDividerConfiguration,\n  GFieldTwoDataConfiguration,\n  GFieldButtonConfiguration,\n  GFieldMapConfiguration\n} from './gs-forms.models';\n\n/**\n * Text widget\n */\nexport class GTextField implements GField {\n  selector = GFieldSelector.TEXT;\n\n  constructor(public config: GFieldConfiguration) {}\n}\n\n/**\n * Textarea widget\n */\nexport class GTextareaField implements GField {\n  selector = GFieldSelector.TEXTAREA;\n\n  constructor(public config: GFieldConfiguration) { }\n}\n\n/**\n * Password widget\n */\nexport class GPasswordField implements GField {\n  selector = GFieldSelector.PASSWORD;\n\n  constructor(public config: GFieldConfiguration) { }\n}\n\n/**\n * Number widget\n */\nexport class GNumberField implements GField {\n  selector = GFieldSelector.NUMBER;\n\n  constructor(public config: GFieldNumberConfiguration) { }\n}\n\n/**\n * Toggle widget\n */\nexport class GToggleField implements GField {\n  selector = GFieldSelector.TOGGLE;\n\n  constructor(public config: GFieldBooleanConfiguration) { }\n}\n\n/**\n * Checkbox widget\n */\nexport class GCheckboxField implements GField {\n  selector = GFieldSelector.CHECKBOX;\n\n  constructor(public config: GFieldBooleanConfiguration) { }\n}\n\n/**\n * Radio widget\n */\nexport class GRadioField implements GField {\n  selector = GFieldSelector.RADIO;\n\n  constructor(public config: GFieldOptionValuesConfiguration) { }\n}\n\n/**\n * Dropdown widget\n */\nexport class GDropdownField implements GField {\n  selector = GFieldSelector.DROPDOWN;\n\n  constructor(public config: GFieldOptionValuesConfiguration) { }\n}\n\n/**\n * Tax document widget\n * @deprecated\n */\nexport class GTaxDocumentTypeField implements GField {\n  selector = GFieldSelector.TAX_TYPE;\n\n  constructor(public config: GFieldCountryFormmatConfiguration) { }\n}\n\n/**\n * Currency widget\n */\nexport class GCurrencyField implements GField {\n  selector = GFieldSelector.CURRENCY;\n\n  constructor(public config: GFieldCountryFormmatConfiguration) { }\n}\n\n/**\n * Phone widget\n */\nexport class GPhoneField implements GField {\n  selector = GFieldSelector.PHONE;\n\n  constructor(public config: GFieldCountryFormmatConfiguration) { }\n}\n\n/**\n * Datepicker widget\n */\nexport class GDatePickerField implements GField {\n  selector = GFieldSelector.DATE;\n\n  constructor(public config: GFieldConfiguration) { }\n}\n\n/**\n * Separated by Comma widget\n */\nexport class GSeparatedByComma implements GField {\n  selector = GFieldSelector.COMMA;\n\n  constructor(public config: GFieldConfiguration) { }\n}\n\n/**\n * Image/File widget\n */\nexport class GFieldFile implements GField {\n  selector = GFieldSelector.FILE;\n\n  constructor(public config: GFieldFileConfiguration) { }\n}\n\n/**\n * Two data input widget\n */\nexport class GTwoDataInput implements GField {\n  selector = GFieldSelector.TWO_DATA;\n\n  constructor(public config: GFieldTwoDataConfiguration) {}\n}\n\n/**\n * Multiselect widget\n */\nexport class GMultiselectField implements GField {\n  selector = GFieldSelector.MULTISELECT;\n\n  constructor(public config: GFieldOptionValuesConfiguration) { }\n}\n\n/**\n * Color picker widget\n */\nexport class GColorPickerField implements GField {\n  selector = GFieldSelector.COLOR;\n\n  constructor(public config: GFieldConfiguration) {}\n}\n\n/**\n * Map widget\n */\nexport class GMapField {\n  selector = GFieldSelector.MAP;\n\n  constructor(public config: GFieldMapConfiguration) {}\n}\n\n/**\n * Time field in 24 hour format\n */\nexport class GTimeField {\n  selector = GFieldSelector.TIME;\n\n  constructor(public config: GFieldConfiguration) {}\n}\n\n/**\n * Divider widget\n */\nexport class GDivider {\n  selector = GFieldSelector.DIVIDER;\n  notWidget = true;\n\n  constructor(public config: GFieldDividerConfiguration) {}\n}\n\n/**\n * Button widget\n */\nexport class GButton {\n  selector = GFieldSelector.BUTTON;\n  notWidget = true;\n\n  constructor(public config: GFieldButtonConfiguration) {}\n}\n\n/**\n * Show-data widget\n */\nexport class GShowData {\n  selector = GFieldSelector.SHOW_DATA;\n  notWidget = true;\n\n  constructor(public config: GFieldConfiguration) {}\n}\n","import { Component, Input, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { GDatePickerField } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\nconst MONTHS = {\n  en: [\n    'january',\n    'february',\n    'march',\n    'april',\n    'may',\n    'june',\n    'july',\n    'august',\n    'september',\n    'october',\n    'november',\n    'december'\n  ],\n  es: [\n    'enero',\n    'febrero',\n    'marzo',\n    'abril',\n    'mayo',\n    'junio',\n    'julio',\n    'agosto',\n    'septiembre',\n    'octubre',\n    'noviembre',\n    'diciembre'\n  ],\n  pr: [\n    'janeiro',\n    'fevereiro',\n    'marcha',\n    'abril',\n    'pode',\n    'junho',\n    'julho',\n    'agosto',\n    'setembro',\n    'outubro',\n    'novembro',\n    'dezembro'\n  ]\n};\n\nconst WEEKDAYS = {\n  en: [\n    'm', 't', 'w', 't', 'f', 's', 's'\n  ],\n  es: [\n    'l', 'm', 'm', 'j', 'v', 's', 'd'\n  ],\n  pr: [\n    's', 't', 'q', 'q', 's', 's', 'd'\n  ]\n};\n\nenum ShowSelector {\n  DAY = 'day',\n  MONTH = 'month',\n  YEAR = 'year'\n}\n\n@Component({\n  selector: 'gs-datepicker',\n  templateUrl: './datepicker.component.html',\n  styleUrls: ['./datepicker.component.sass']\n})\nexport class GsDatePickerComponent extends GsGenericFieldComponent implements OnInit, OnChanges {\n  @Input() public field: GDatePickerField;\n  public dateValue: string;\n  public lang: string;\n  public months: Array<string>;\n  public weekdays: Array<string>;\n\n  // displayed date\n  public currentMonth;\n  public currentYear;\n  public daysInPreviousMonthWeek = [];\n  public daysInCurrentMonth: Array<{ day: number, status: 'string' }> = [];\n  public daysInNextMonthWeek = [];\n\n  // selected day\n  private selectedDate = new Date();\n  private date = new Date();\n\n  // selectors UI\n  public showSelector: ShowSelector = ShowSelector.DAY;\n  public showSelectorType = ShowSelector;\n  public yearUiArray = new Array(12);\n  public yearMultiplier = 0;\n  public showDatePickerSelector = false;\n\n  ngOnInit() {\n    this.lang = this.formsService.getLang() || 'en';\n    this.months = MONTHS[this.lang];\n    this.weekdays = WEEKDAYS[this.lang];\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field.currentValue.config && changes.field.currentValue.config.value) {\n      this.dateValue = changes.field.currentValue.config.value.toString();\n\n      if (this.dateValue.split('-')) {\n        const date = this.dateValue.split('-');\n        this.selectedDate = new Date(Number(date[0]), Number(date[1]) - 1, Number(date[2]));\n        this.date = new Date(Number(date[0]), Number(date[1]) - 1, Number(date[2]));\n      }\n    }\n\n    this.setCalendar();\n  }\n\n  private setCalendar() {\n    this.currentMonth = this.date.getUTCMonth();\n    this.currentYear = this.date.getUTCFullYear();\n    this.getDaysInCalendar();\n  }\n\n  public changeMonth(next: boolean) {\n    this.date.setMonth(next ? this.date.getUTCMonth() + 1 : this.date.getUTCMonth() - 1);\n    this.currentMonth = this.date.getUTCMonth();\n    this.currentYear = this.date.getUTCFullYear();\n    this.setCalendar();\n\n    setTimeout(() => {\n      this.showDatePickerSelector = true;\n    });\n  }\n\n  public navigateSelectors(next: boolean) {\n    if (this.showSelector === ShowSelector.YEAR) {\n      return this.changeYear(next);\n    } else {\n      return this.changeMonth(next);\n    }\n  }\n\n  public changeYear(next: boolean) {\n    this.yearMultiplier = next ? this.yearMultiplier + 12 : this.yearMultiplier - 12;\n  }\n\n  private getDaysInCalendar() {\n    // days in current month\n    const daysOfCurrentMonth = new Date(\n      this.currentYear, this.currentMonth + 1, 0\n    ).getUTCDate();\n    const currentMonthDays = [];\n\n    for (let i = 0; i < daysOfCurrentMonth; i++) {\n      if (\n        this.selectedDate.getUTCFullYear() === this.date.getUTCFullYear() &&\n        this.selectedDate.getUTCMonth() === this.date.getUTCMonth() &&\n        i + 1 === this.selectedDate.getUTCDate()\n      ) {\n        currentMonthDays.push({\n          day: i + 1,\n          status: 'selected'\n        });\n      } else {\n        currentMonthDays.push({\n          day: i + 1,\n          status: 'available'\n        });\n      }\n    }\n\n    this.daysInCurrentMonth = currentMonthDays;\n\n    // dasy in previous month week\n    this.daysInPreviousMonthWeek = this.getPreviousMonth();\n\n    // days in next month week\n    this.daysInNextMonthWeek = this.getNextMonth();\n  }\n\n  private getPreviousMonth(): Array<number> {\n    const daysOfBeforeMonth = new Date(this.currentYear, this.currentMonth, 0).getUTCDate();\n    const firstDayOfCurrentMonth = new Date(\n      this.currentYear, this.currentMonth, 0\n    ).getDay();\n    const previousWeekDays = [];\n\n    for (let i = 0; i < firstDayOfCurrentMonth; i++) {\n      previousWeekDays.push(daysOfBeforeMonth - i);\n    }\n\n    return previousWeekDays.reverse();\n  }\n\n  private getNextMonth(): Array<number> {\n    const lastDayOfMonth = new Date(\n      this.currentYear, this.currentMonth + 2, 0\n    ).getDay();\n    const nextWeekDays = [];\n\n    for (let i = 0; i < (7 - lastDayOfMonth); i++) {\n      nextWeekDays.push(i + 1);\n    }\n\n    return nextWeekDays;\n  }\n\n  public selectDate(day: number) {\n    this.selectedDate = new Date(this.currentYear, this.currentMonth, day);\n    this.dateValue = this.formatDate(this.selectedDate);\n    this.formGroup.controls[this.field.config.model].patchValue(this.dateValue);\n    this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n    this.getDaysInCalendar();\n    this.toggleDatePickerSelector(false);\n  }\n\n  public selectMonth(month: number) {\n    this.date.setMonth(month);\n    this.currentMonth = this.date.getUTCMonth();\n    this.getDaysInCalendar();\n\n    this.showSelector = ShowSelector.DAY;\n\n    setTimeout(() => {\n      this.showDatePickerSelector = true;\n    });\n  }\n\n  public selectYear(year: number) {\n    this.date.setFullYear(year);\n    this.currentYear = this.date.getUTCFullYear();\n    this.getDaysInCalendar();\n    this.showSelector = ShowSelector.MONTH;\n\n    setTimeout(() => {\n      this.showDatePickerSelector = true;\n    });\n  }\n\n  public toggleSelector(selector: ShowSelector) {\n    this.showSelector = selector;\n\n    setTimeout(() => {\n      this.showDatePickerSelector = true;\n    });\n  }\n\n  public toggleDatePickerSelector(value = !this.showDatePickerSelector) {\n    this.showDatePickerSelector = value;\n  }\n\n  public disableKeys() {\n    return false;\n  }\n\n  private formatDate(date: Date) {\n    const year = date.getUTCFullYear();\n\n    let month = (date.getUTCMonth() + 1).toString();\n    let day = date.getUTCDate().toString();\n\n    if (month.length < 2) {\n      month = `0${month}`;\n    }\n\n    if (day.length < 2) {\n      day = `0${day}`;\n    }\n\n    return [year, month, day].join('-');\n  }\n\n  public resetField() {\n    this.dateValue = null;\n  }\n}\n","import { GFieldCountryCode, GFieldSelector, GFieldValidatorType, GFieldValueType, GFieldValueButtonType } from './gs-forms.enums';\n\nexport interface GFieldOptionValue {\n  value: string | number | boolean;\n  text: string;\n}\n\nexport interface GFieldOptionValueExists extends GFieldOptionValue {\n  exists?: boolean;\n}\n\nexport type GFieldOptionValues = Array<GFieldOptionValue>;\nexport type GFieldExistsOptionValues = Array<GFieldOptionValueExists>;\n\nexport interface GFieldTwoDataInputOptions {\n  /**\n   * Value type\n   */\n  type?: GFieldValueType;\n  /**\n   * Input validator\n   *\n   * If null it will try to use the `config.validators`\n   */\n  validators?: GFieldValidators;\n  /**\n   * Placeholder\n   */\n  placeholder?: string;\n}\n\n/**\n * Form options\n */\nexport interface GFormOptions {\n  /**\n   * Pass any argument to the form:\n   *\n   * @example\n   * <form [autocomplete]=\"yourOptions.autocomplete\">\n   */\n  autocomplete?: string;\n  /**\n   * Disable submit if the form has errors.\n   */\n  onErrorDisableSubmit?: boolean;\n  /**\n   * Set default country using `GFieldCountryCode` enum form gs-field\n   */\n  country?: GFieldCountryCode;\n  /**\n   * Object containing options for fields like `GDropdownField` where `[key: string]` is the model name of the `GField`.\n   */\n  fieldValues?: {\n    [key: string]: GFieldOptionValues;\n  };\n  layout?: {\n    /**\n     * Number to specify the quantity of columns, an string to pass any valid value for `grid-template-columns`\n     * Number example: 3 (will render 3 columns for each row)\n     * String example: auto 200px repeat(2, 1fr)\n     */\n    columns?: number | string;\n    /**\n     * If true, the form labels will not be displayed.\n     */\n    hideFormLabels?: boolean;\n    /**\n     * Padding for the body and footer of the form\n     */\n    innerPadding?: string;\n  };\n  context?: {\n    saveButton?: {\n      text?: string;\n      show?: boolean;\n    };\n    cancelButton?: {\n      text?: string;\n      show?: boolean;\n    }\n  };\n}\n\n/**\n * Field validators\n */\nexport interface GFieldValidators {\n  [GFieldValidatorType.MIN]?: number;\n  [GFieldValidatorType.MAX]?: number;\n  [GFieldValidatorType.REQUIRED]?: boolean;\n  [GFieldValidatorType.EMAIL]?: boolean;\n  [GFieldValidatorType.MIN_LENGTH]?: number;\n  [GFieldValidatorType.MAX_LENGTH]?: number;\n  [GFieldValidatorType.PATTERN]?: string | RegExp;\n}\n\n/**\n * Default field configuration\n */\nexport class GFieldConfiguration {\n  /**\n   * form control name\n   */\n  model: string;\n  /**\n   * Field validators\n   *\n   * Available validators are:\n   *   [GFieldValidatorType.MIN]?: number;\n   *   [GFieldValidatorType.MAX]?: number;\n   *   [GFieldValidatorType.REQUIRED]?: boolean;\n   *   [GFieldValidatorType.EMAIL]?: boolean;\n   *   [GFieldValidatorType.MIN_LENGTH]?: number;\n   *   [GFieldValidatorType.MAX_LENGTH]?: number;\n   *   [GFieldValidatorType.PATTERN]?: string | RegExp;\n   *\n   */\n  validators?: GFieldValidators;\n  /**\n   * Field label. To hide label set its value to null\n   */\n  label?: string;\n  /**\n   * Field placeholder. If not specified will use label or model\n   */\n  placeholder?: string;\n  /**\n   * Field default value\n   */\n  value?: string | number | boolean | object;\n  /**\n   * Set the `autocomplete` attribute of an `input`\n   */\n  autocomplete?: string;\n  /**\n   * Dynamically display/hide this field by setting this property\n   */\n  displayIf?: {\n    /**\n     * Model that will be evaluated\n     */\n    model: string;\n    /**\n     * Display this field if that model has this value\n     */\n    hasValue: any\n  } = null;\n  /**\n   * Field position on the grid columns\n   * Has to be a valid value for css `grid-column` attribute\n   *\n   * For example: '1 / 3' | '2'\n   */\n  gridColumn?: string;\n  /**\n   * Field position on the grid rows\n   * Has to be a valid value for css `grid-row` attribute\n   *\n   * For example: '1 / 3' | '2'\n   */\n  gridRow?: string;\n  /**\n   * Show symbol in this field if it's necessary\n   */\n  symbol?: string;\n}\n\n/**\n * Field configuration for only string fields\n */\nexport class GFieldStringConfiguration extends GFieldConfiguration {\n  /**\n   * Field default value\n   */\n  value?: boolean;\n}\n\n/**\n * Field configuration for only string fields\n */\nexport class GFieldMapConfiguration extends GFieldConfiguration {\n  /**\n   * If true will display Google Map modal\n   */\n  showMap?: boolean;\n}\n\n/**\n * Field configuration for only number fields\n */\nexport class GFieldNumberConfiguration extends GFieldConfiguration {\n  /**\n   * Field default value\n   */\n  value?: number | string;\n  /**\n   * set input decimal\n   */\n  decimal?: boolean;\n  /**\n   * set precision decimal\n   */\n  precision?: number;\n}\n\n/**\n * Field configuration for only boolean fields\n */\nexport class GFieldBooleanConfiguration extends GFieldConfiguration {\n  /**\n   * Field default value\n   */\n  value?: boolean;\n}\n\n/**\n * Field configuration including option values for `GRadioField` and `GDropdownField`\n */\nexport class GFieldOptionValuesConfiguration extends GFieldConfiguration {\n  /**\n   * Field value options\n   */\n  optionValues?: GFieldOptionValues;\n  /**\n   * If true this field will replace its `optionValues` with one passed in `FormOptions`\n   */\n  externalOptions?: boolean;\n}\n\n/**\n * Field configuration including country option for `GCurrencyField` and `GPhoneField`\n */\nexport class GFieldCountryFormmatConfiguration extends GFieldConfiguration {\n  /**\n   * Country configuration\n   */\n  country?: GFieldCountryCode;\n  /**\n   * If true the country can be changed\n   */\n  editCountry?: boolean;\n}\n\n/**\n * Field configuration for `GFieldFile`\n */\nexport class GFieldFileConfiguration extends GFieldConfiguration {\n  /**\n   * If true it will return the file as binary instead of trying to upload it\n   */\n  returnFile?: boolean;\n  /**\n   * Upload url configuration\n   */\n  api?: {\n    /**\n     * Url to make the http request\n     */\n    url: string;\n    /**\n     * Http method for the request\n     * One of: 'post' || 'put'\n     */\n    method: string;\n    /**\n     * Property name in multipart form\n     */\n    fileParamName: string;\n  };\n  /**\n   * Supported file extensions\n   * For example: '.pdf, .doc, .xml, etc'\n   */\n  accept?: string;\n  /**\n   * valid limit size\n   */\n  size?: number;\n  /**\n   * Default file value\n   */\n  value?: File;\n}\n\n/**\n * Field configuration for `GTwoDataInput`\n */\nexport class GFieldTwoDataConfiguration extends GFieldConfiguration {\n  /**\n   * If has value it will show it in the middle of the to inputs\n   */\n  divider?: string;\n  /**\n   * Options for each input\n   */\n  options?: {\n    left?: GFieldTwoDataInputOptions;\n    right?: GFieldTwoDataInputOptions;\n  };\n  /**\n   * Grid column size for each input\n   */\n  grid?: [string, string];\n  /**\n   * Set the default value for each input\n   */\n  value?: {\n    /**\n     * left input value\n     */\n    left: string | number;\n    /**\n     * right input value\n     */\n    right: string | number;\n  };\n}\n\n/**\n * Field configuration for `GDivider`\n */\nexport class GFieldDividerConfiguration extends GFieldConfiguration {\n  /**\n   * Use the divider as a section headline with a title\n   */\n  seccionName?: string;\n  /**\n   * Divider padding\n   */\n  padding?: string;\n  /**\n   * Divider padding\n   */\n  dividerColor?: string;\n  /**\n   * If true the divider horizontal line wont be showed\n   */\n  hideLine?: boolean;\n  /**\n   * A little description\n   */\n  description?: string;\n}\n\n/**\n * Field configuration for `GButton`\n */\nexport class GFieldButtonConfiguration extends GFieldConfiguration {\n  /**\n   * action button\n   */\n  action: GFieldValueButtonType;\n  /**\n   * identifier button\n   */\n  id?: string;\n}\n\n/**\n * Field interface\n */\nexport interface GField {\n  selector: GFieldSelector;\n  config: GFieldConfiguration | GFieldOptionValuesConfiguration | GFieldCountryFormmatConfiguration | GFieldDividerConfiguration;\n  notWidget?: boolean;\n  rappyStyle?: {};\n}\n\n/**\n * Form fields type\n */\nexport type GFormFields = Array<GField>;\n\n/**\n * Form fields type as readonly type\n */\nexport type GFormFieldsReadOnly = ReadonlyArray<GField>;\n\n/**\n * Location interface and its dependencies\n */\nexport interface GLocation {\n  tax: Array<{\n    name: string;\n    value: string;\n  }>;\n  country: {\n    name: string;\n    alpha2Code: string;\n  };\n  phoneFormat: {\n    code: string;\n    mask: string;\n  };\n  currencyFormat: {\n    code: string;\n    symbol: string;\n    thousands: string;\n    decimal: string;\n    precision: number;\n  };\n  lanLng?: {\n    lat: number,\n    lng: number\n  };\n  disabled?: boolean;\n}\n\nexport interface GInputStyle {\n  /* Input padding */\n  padding?: string;\n  /* Input text color */\n  color?: string;\n  /* Input backgroud */\n  background?: string;\n  /* Input border size */\n  borderSize?: string;\n  /* Input border style */\n  borderStyle?: string;\n  /* Input border color */\n  borderColor?: string;\n  /* Input radious */\n  borderRadius?: string;\n  /* Input border top width/size */\n  borderTop?: string;\n  /* Input border right width/size */\n  borderRight?: string;\n  /* Input border bottom width/size */\n  borderBottom?: string;\n  /* Input border left width/size */\n  borderLeft?: string;\n}\n\n/**\n * Library styles\n *\n * @description\n * Send style parameters to the library\n *\n */\nexport interface GStyles {\n  color?: {\n    /**\n     * Font color\n     * default: \"inherit\"\n     */\n    font?: string;\n\n    /**\n     * Primary color, used in important UI elements background and color\n     * default: \"#4588fd\"\n     */\n    primary?: string;\n\n    /**\n     * Secondary color, used in some UI elements background and color\n     * default: \"#7a9e9f\"\n     */\n    secondary?: string;\n\n    /**\n     * Neutral color, used in some UI elements background and color\n     * default: \"#4f6367\"\n     */\n    neutral?: string;\n\n    /**\n     * Border color\n     * default: \"#eeeeee\"\n     */\n    border?: string;\n\n    /**\n     * White color, all white colors used in UI elements\n     * default: \"#ffffff\"\n     */\n    white?: string;\n  };\n  ui?: {\n    /**\n     * Font size, all fonts size\n     * default: \".9rem\"\n     */\n    fontSize?: string;\n\n    /**\n     * Inner padding\n     */\n    padding?: string;\n\n    /**\n     * Input opacity when it's disabled\n     * default: \".7\"\n     */\n    disabledOpacity?: string;\n\n    /**\n     * Input and button style\n     * Go to `GInputStyle` for detail\n     */\n    input?: GInputStyle;\n    primaryButton?: GInputStyle;\n    secondaryButton?: GInputStyle;\n  };\n}\n","import { GLocation } from './gs-forms.models';\n\n// https://lowpostayuda.zendesk.com/hc/es/articles/115004070469-Nombres-Identificaci%C3%B3n-tributaria-por-pa%C3%ADses\n// http://www.wtng.info/wtng-54-ar.html\n\nexport const LOCATION: { [key: string]: GLocation } = {\n  ar: {\n    tax: [\n      {\n        name: 'CUIT (Código Único de Identificación Tributaria)',\n        value: 'CUIT'\n      }\n    ],\n    country: {\n      name: 'Argentina',\n      alpha2Code: 'AR'\n    },\n    phoneFormat: {\n      code: '54',\n      mask: '000 00000000'\n    },\n    currencyFormat: {\n      code: 'ARS',\n      symbol: '$',\n      thousands: '.',\n      decimal: ',',\n      precision: 2\n    }\n  },\n  bo: {\n    tax: [\n      {\n        name: 'RUC (Registro Único de Contribuyentes)',\n        value: 'RUC'\n      }\n    ],\n    country: {\n      name: 'Bolivia',\n      alpha2Code: 'BO'\n    },\n    phoneFormat: {\n      code: '591',\n      mask: '000 0000000'\n    },\n    currencyFormat: {\n      code: 'BOB',\n      symbol: 'Bs.',\n      thousands: '.',\n      decimal: ',',\n      precision: 2\n    }\n  },\n  br: {\n    tax: [\n      {\n        name: 'CPF (Cadastro de Persona Física)',\n        value: 'CPF'\n      },\n      {\n        name: 'CNPJ (Cadastro de Persona Jurídica)',\n        value: 'CNPJ'\n      }\n    ],\n    country: {\n      name: 'Brazil',\n      alpha2Code: 'BR'\n    },\n    phoneFormat: {\n      code: '55',\n      mask: '00 0 0000 0000'\n    },\n    currencyFormat: {\n      code: 'BRL',\n      symbol: 'R$',\n      thousands: '.',\n      decimal: ',',\n      precision: 2\n    }\n  },\n  ca: {\n    disabled: true,\n    tax: [\n      {\n        name: 'SIN (Social Insurance Number)',\n        value: 'SIN'\n      },\n      {\n        name: `NAS (numéro d'assurance social)`,\n        value: 'NAS'\n      }\n    ],\n    country: {\n      name: 'Canada',\n      alpha2Code: 'CA'\n    },\n    phoneFormat: {\n      code: '1',\n      mask: '000 000 0000'\n    },\n    currencyFormat: {\n      code: 'CAD',\n      symbol: '$',\n      thousands: ',',\n      decimal: '.',\n      precision: 2\n    }\n  },\n  cl: {\n    tax: [\n      {\n        name: 'RUT (Rol Único Tributario)',\n        value: 'RUT'\n      }\n    ],\n    country: {\n      name: 'Chile',\n      alpha2Code: 'CL'\n    },\n    phoneFormat: {\n      code: '56',\n      mask: '00 0000000'\n    },\n    currencyFormat: {\n      code: 'CLP',\n      symbol: '$',\n      thousands: ',',\n      decimal: '.',\n      precision: 0\n    }\n  },\n  co: {\n    tax: [\n      {\n        name: 'NIT (Número de Identificación Tributaria)',\n        value: 'NIT'\n      }\n    ],\n    country: {\n      name: 'Colombia',\n      alpha2Code: 'CO'\n    },\n    phoneFormat: {\n      code: '57',\n      mask: '000 000 0000'\n    },\n    currencyFormat: {\n      code: 'COP',\n      symbol: '$',\n      thousands: '.',\n      decimal: ',',\n      precision: 0\n    },\n    lanLng: {\n      lat: 4.6565365,\n      lng: -74.1248367\n    }\n  },\n  cr: {\n    disabled: true,\n    tax: [\n      {\n        name: 'NITE (Número de Identificación Tributaria Especial)',\n        value: 'NITE'\n      }\n    ],\n    country: {\n      name: 'Costa Rica',\n      alpha2Code: 'CR'\n    },\n    phoneFormat: {\n      code: '506',\n      mask: '000000000000'\n    },\n    currencyFormat: {\n      code: 'CRC',\n      symbol: '₡',\n      thousands: '.',\n      decimal: ',',\n      precision: 2\n    }\n  },\n  ec: {\n    disabled: true,\n    tax: [\n      {\n        name: 'RUC (Registro Único de Contribuyentes)',\n        value: 'RUC'\n      }\n    ],\n    country: {\n      name: 'Ecuador',\n      alpha2Code: 'EC'\n    },\n    phoneFormat: {\n      code: '593',\n      mask: '000000000000'\n    },\n    currencyFormat: {\n      code: 'USD',\n      symbol: '$',\n      thousands: ',',\n      decimal: '.',\n      precision: 2\n    }\n  },\n  mx: {\n    tax: [\n      {\n        name: 'RFC (Registro Federal de Contribuyentes)',\n        value: 'RFC'\n      }\n    ],\n    country: {\n      name: 'Mexico',\n      alpha2Code: 'MX'\n    },\n    phoneFormat: {\n      code: '52',\n      mask: '00 0000 0000'\n    },\n    currencyFormat: {\n      code: 'MXN',\n      symbol: '$',\n      thousands: ',',\n      decimal: '.',\n      precision: 2\n    }\n  },\n  pe: {\n    tax: [\n      {\n        name: 'RUC (Registro Único de Contribuyentes)',\n        value: 'RUC'\n      }\n    ],\n    country: {\n      name: 'Peru',\n      alpha2Code: 'PE'\n    },\n    phoneFormat: {\n      code: '51',\n      mask: '000000000000'\n    },\n    currencyFormat: {\n      code: 'PEN',\n      symbol: 'S/.',\n      thousands: '.',\n      decimal: ',',\n      precision: 2\n    }\n  },\n  us: {\n    disabled: true,\n    tax: [\n      {\n        name: 'TIN (Taxpayer Identification Number)',\n        value: 'TIN'\n      }\n    ],\n    country: {\n      name: 'United States',\n      alpha2Code: 'US'\n    },\n    phoneFormat: {\n      code: '1',\n      mask: '000 000 0000'\n    },\n    currencyFormat: {\n      code: 'USD',\n      symbol: '$',\n      thousands: ',',\n      decimal: '.',\n      precision: 2\n    }\n  },\n  uy: {\n    tax: [\n      {\n        name: 'RUT (Registro Único Tributario)',\n        value: 'RUT'\n      }\n    ],\n    country: {\n      name: 'Uruguay',\n      alpha2Code: 'UY'\n    },\n    phoneFormat: {\n      code: '598',\n      mask: '000000000000'\n    },\n    currencyFormat: {\n      code: 'UYU',\n      symbol: '$',\n      thousands: ',',\n      decimal: '.',\n      precision: 2\n    }\n  },\n  ve: {\n    disabled: true,\n    tax: [\n      {\n        name: 'RIF (Registro de Información Fiscal)',\n        value: 'RIF'\n      }\n    ],\n    country: {\n      name: 'Venezuela',\n      alpha2Code: 'VE'\n    },\n    phoneFormat: {\n      code: '58',\n      mask: '000 000 0000'\n    },\n    currencyFormat: {\n      code: 'VEF',\n      symbol: 'Bs.',\n      thousands: '.',\n      decimal: ',',\n      precision: 0\n    }\n  }\n};\n\nexport const VALIDATION_MESSAGES: { [key: string]: { [key: string]: string } } = {\n  en: {\n    ERR_MIN: 'The value must be greater than or equal to ${param}',\n    ERR_MAX: 'The value must be less than or equal to ${param}',\n    ERR_REQUIRED: 'This field is required',\n    ERR_EMAIL: 'The email must have a valid format',\n    ERR_MIN_LENGTH: 'The value must be at least ${param} characters',\n    ERR_MAX_LENGTH: 'The value must have a maximum of ${param} characters',\n    ERR_PATTERN: 'The value format is not correct',\n    DEFAULT: 'This field has an unknown error',\n    ERR_REQUIRED_TWO_DATA_RIGHT: 'The right field is required',\n    ERR_REQUIRED_TWO_DATA_LEFT: 'The left field is required',\n    ERR_REQUIRED_MIN: 'Minutes are required',\n    ERR_REQUIRED_HOUR: 'Hours are required',\n    ERR_REQUIRED_FULLTIME: 'Hours and minutes are required',\n    ERR_PATTERN_MIN: 'Minutes format is invalid',\n    ERR_PATTERN_HOUR: 'Hours format is invalid',\n    ERR_PATTERN_FULLTIME: 'Hours and minutes format are invalid'\n  },\n  es: {\n    ERR_MIN: 'El valor debe ser mayor o igual que ${param}',\n    ERR_MAX: 'El valor debe ser menor o igual que ${param}',\n    ERR_REQUIRED: 'Esta campo es requerido',\n    ERR_EMAIL: 'El correo debe tener un formato válido',\n    ERR_MIN_LENGTH: 'El valor debe tener al menos ${param} caracteres',\n    ERR_MAX_LENGTH: 'El valor debe tener un máximo de ${param} caracteres',\n    ERR_PATTERN: 'El formato del valor no es correcto.',\n    DEFAULT: 'Este campo tiene un error desconocido',\n    ERR_REQUIRED_TWO_DATA_RIGHT: 'El campo de la derecha es requerido',\n    ERR_REQUIRED_TWO_DATA_LEFT: 'El campo de la izquierda es requerido',\n    ERR_REQUIRED_MIN: 'Los minutos son requeridos',\n    ERR_REQUIRED_HOUR: 'Las horas son requeridas',\n    ERR_REQUIRED_FULLTIME: 'Las horas y los minutos son requeridos',\n    ERR_PATTERN_MIN: 'El formato de los minutos es incorrecto',\n    ERR_PATTERN_HOUR: 'El formato de las horas es incorrecto',\n    ERR_PATTERN_FULLTIME: 'El formato de horas y minutos es incorrecto'\n  }\n};\n\nexport const MESSAGES: { [key: string]: { [key: string]: string } } = {\n  en: {\n    SELECT_ADDRESS: 'Select address'\n  },\n  es: {\n    SELECT_ADDRESS: 'Selecciones una dirección'\n  }\n};\n\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { GFormFields, GField, GFieldOptionValues, GFormFieldsReadOnly } from './gs-forms.models';\nimport { GFieldValidatorType } from './gs-forms.enums';\nimport { TranslateService } from '@ngx-translate/core';\nimport { VALIDATION_MESSAGES, MESSAGES } from './gs-forms.constants';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GsFormsService {\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private translateService: TranslateService,\n    private http: HttpClient\n  ) { }\n\n  public buildErrors(validator: string, value: any): Validators {\n    switch (validator) {\n      case GFieldValidatorType.MIN:\n        return Validators.min(value);\n\n      case GFieldValidatorType.MAX:\n        return Validators.max(value);\n\n      case GFieldValidatorType.REQUIRED:\n        return Validators.required;\n\n      case GFieldValidatorType.EMAIL:\n        return Validators.email;\n\n      case GFieldValidatorType.MIN_LENGTH:\n        return Validators.minLength(value);\n\n      case GFieldValidatorType.MAX_LENGTH:\n        return Validators.maxLength(value);\n\n      case GFieldValidatorType.PATTERN:\n        return Validators.pattern(value);\n    }\n  }\n\n  private setDefaultFormObject(field: GField, formObject: object, hasValidators: boolean): object {\n    formObject[field.config.model] = [];\n    formObject[field.config.model].push({\n      value: field.config.value,\n      disabled: false\n    });\n\n    const validators = [];\n    const fields = field.config.validators;\n\n    for (const validator in fields) {\n      if (Object.prototype.hasOwnProperty.call(fields, validator) && fields[validator]) {\n        validators.push(this.buildErrors(validator, fields[validator]));\n      }\n    }\n\n    if (hasValidators) {\n      formObject[field.config.model].push(Validators.compose(validators));\n    }\n    return formObject;\n  }\n\n  public buildForm(formField: GFormFields): FormGroup {\n    const formObject = new Object();\n\n    for (const field of formField) {\n      if (field.config.model && !field.notWidget) {\n        this.setDefaultFormObject(field, formObject, field.config.validators ? true : false);\n      }\n    }\n\n    return this.formBuilder.group(formObject);\n  }\n\n  public fieldError(field: any): string {\n    const error = field.errors;\n\n    if (error[GFieldValidatorType.MIN]) {\n      return this.getValidationMessage('ERR_MIN', error[GFieldValidatorType.MIN].min);\n\n    } else if (error[GFieldValidatorType.MAX]) {\n      return this.getValidationMessage('ERR_MAX', error[GFieldValidatorType.MAX].max);\n\n    } else if (error[GFieldValidatorType.REQUIRED]) {\n      return this.getValidationMessage('ERR_REQUIRED');\n\n    } else if (error[GFieldValidatorType.EMAIL]) {\n      return this.getValidationMessage('ERR_EMAIL');\n\n    } else if (error[GFieldValidatorType.MIN_LENGTH]) {\n      return this.getValidationMessage('ERR_MIN_LENGTH', error[GFieldValidatorType.MIN_LENGTH].requiredLength);\n\n    } else if (error[GFieldValidatorType.MAX_LENGTH]) {\n      return this.getValidationMessage('ERR_MAX_LENGTH', error[GFieldValidatorType.MAX_LENGTH].requiredLength);\n\n    } else if (error[GFieldValidatorType.PATTERN]) {\n      return this.getValidationMessage('ERR_PATTERN');\n\n    } else {\n      return this.getValidationMessage('DEFAULT');\n    }\n  }\n\n  public getValidationMessage(key: string, param?: string) {\n    let lang = this.translateService.currentLang;\n\n    if (!lang) {\n      console.warn(`translateService.currentLang is not set, using default language: 'en'`);\n      lang = 'en';\n    }\n\n    let messageLang = VALIDATION_MESSAGES.en;\n\n    if (!VALIDATION_MESSAGES[lang]) {\n      console.warn(`We don't have support for language ${lang}. Please email us to hi@tavoohoh.com. Using default language: 'en'`);\n    } else {\n      messageLang = VALIDATION_MESSAGES[lang];\n    }\n\n    let message = messageLang[key];\n\n    if (param) {\n      message = message.replace('${param}', param);\n    }\n\n    return message;\n  }\n\n  public getMessage(key: string, param?: string) {\n    const messageLang = !this.translateService.currentLang ? MESSAGES.en : MESSAGES[this.translateService.currentLang];\n    let message = messageLang[key];\n    if (param) {\n      message = message.replace('${param}', param);\n    }\n    return message;\n  }\n\n  public getLang(): string {\n    return this.translateService.getDefaultLang();\n  }\n\n  public uploadFileServices(url: string, method: string, file: File, paramName: string): Observable<Response> {\n    const formData = new FormData();\n    formData.append(paramName, file);\n\n    return this.http[method](url, formData);\n  }\n\n  /**\n   * @description\n   * Convert an array of values `Array<{[key: string]: any}> | Array<{[key: string]: any, [key: string]: any}>`\n   *\n   * @param options\n   * An array of values\n   * @param optionValue\n   * The key to be mapped to `GFieldOptionValues` key `value`\n   * @param optionText\n   * The key to be mapped to `GFieldOptionValues` key `text`\n   *\n   * @key value\n   * The value used in a select option\n   * @key text\n   * The text used inside of select option\n   */\n  public mapFieldOptionValues(options: Array<{}>, optionValue: string, optionText: string, ): GFieldOptionValues {\n    const mappedValues = options.map(obj => {\n      return {\n        value: obj[optionValue],\n        text: obj[optionText]\n      };\n    });\n\n    return mappedValues;\n  }\n\n  /**\n   * @description\n   * Patch form values\n   *\n   * @param formFields your `GFormFields`\n   * @param formValues an object of values like `FormGroup` value.\n   * The keys of `formValues` most match the model name of your `GFields`\n   */\n  public patchFormValues(\n    formFields: GFormFields | GFormFieldsReadOnly,\n    formValues: { [key: string]: any },\n    resetForm?: boolean,\n    resetFields?: boolean\n  ): GFormFields {\n\n    if (!resetFields) {\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < formFields.length; i++) {\n        formFields[i].config.value = null;\n      }\n    }\n\n    if (!resetForm) {\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < formFields.length; i++) {\n        if (formValues[formFields[i].config.model]) {\n          formFields[i].config.value = formValues[formFields[i].config.model];\n        }\n      }\n    }\n\n    return formFields as GFormFields;\n  }\n\n  public getAddress(lan, lng, apikey): Observable<any> {\n    return this.http.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lan},${lng}&result_type=street_address&key=${apikey}`);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { GsFormsService } from '../../gs-forms.service';\nimport { FormGroup, ValidationErrors } from '@angular/forms';\nimport { GFieldValidatorType } from '../../gs-forms.enums';\n\n@Component({\n  template: ``\n})\nexport class GsGenericFieldComponent {\n  @Input() public field: any;\n  @Input() public formGroup: FormGroup;\n\n  public fieldValidatorType = GFieldValidatorType;\n\n  constructor(\n    public formsService: GsFormsService\n  ) { }\n\n  public validateField($event?: any): ValidationErrors {\n    return this.formGroup.controls[this.field.config.model].dirty && this.formGroup.controls[this.field.config.model].errors;\n  }\n\n  public getFieldError($event?: any): string {\n    return this.formsService.fieldError(this.formGroup.controls[this.field.config.model]);\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { GCheckboxField } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.sass']\n})\nexport class GsCheckboxComponent extends GsGenericFieldComponent implements OnChanges {\n  @Input() public field: GCheckboxField;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes && changes.field && changes.field.currentValue) {\n      this.field = changes.field.currentValue;\n    }\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { GCurrencyField } from '../../gs-forms.widgets';\nimport { GFieldValidatorType, GFieldCountryCode } from '../../gs-forms.enums';\nimport { LOCATION } from '../../gs-forms.constants';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-currency-input',\n  templateUrl: './currency-input.component.html',\n  styleUrls: ['./currency-input.component.sass']\n})\nexport class GsCurrencyInputComponent extends GsGenericFieldComponent implements OnChanges {\n  @Input() public field: GCurrencyField;\n  @Input() private countryGlobal: GFieldCountryCode;\n\n  public pattern: string | RegExp;\n  public prefix: string;\n  public suffix: string;\n  public value = '';\n\n  private thousandsSeparator: string;\n  private decimalSeparator: string;\n  private precision: number;\n\n  public fieldValidatorType = GFieldValidatorType;\n\n  ngOnChanges(changes: SimpleChanges) {\n    let location = null;\n\n    if (changes.field && changes.field.currentValue.config.country) {\n      location = LOCATION[changes.field.currentValue.config.country];\n\n    } else if (changes.countryGlobal && changes.countryGlobal.currentValue) {\n      location = LOCATION[changes.countryGlobal.currentValue];\n\n    } else {\n      return this.returnBuildingError();\n    }\n\n    this.prefix = location.currencyFormat.symbol;\n    this.suffix = location.currencyFormat.code;\n    this.thousandsSeparator = location.currencyFormat.thousands;\n    this.decimalSeparator = location.currencyFormat.decimal;\n    this.precision = location.currencyFormat.precision;\n\n    if (changes.field.currentValue.config.value) {\n      this.value = changes.field.currentValue.config.value.toString().replace('.', '');\n    }\n\n    this.formatCurrency(false);\n  }\n\n  public formatCurrency(keyup: boolean) {\n    let inputVal = this.value || '0';\n\n    // mark input as dirty\n    if (keyup) {\n      this.formGroup.controls[this.field.config.model].markAsDirty();\n    }\n\n    // remove any leading zeros\n    if (inputVal.substring(0, 1) === '0') {\n      inputVal = inputVal.replace(/^[0|\\D]*/, '');\n    }\n\n    // format decimal if applies\n    if (!inputVal || inputVal.length === 1 && inputVal.substring(0, 1) === '0') {\n      let emptyDecimals = '0';\n\n      if (this.precision > 0) {\n        for (let index = 0; index < this.precision; index++) {\n          emptyDecimals = emptyDecimals + '0';\n        }\n      }\n      inputVal = emptyDecimals;\n    }\n\n    const cleanValue = inputVal.replace(/\\D/g, '');\n\n    let decimals = null;\n    let thousands = null;\n\n    // format number as currency\n    if (this.precision > 0) {\n      decimals = cleanValue.slice(this.precision - this.precision * 2);\n\n      if (decimals.length < this.precision) {\n        for (let index = 0; index < this.precision - Number(decimals); index++) {\n          decimals = '0' + decimals;\n        }\n        thousands = '0';\n      } else {\n        thousands = cleanValue.substring(0, cleanValue.length - this.precision) || '0';\n      }\n\n    } else {\n      thousands = cleanValue;\n    }\n\n    const formattedThousands = thousands.replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n    const controlValue = `${thousands}${decimals ? '.' + decimals : ''}`;\n\n    this.value = formattedThousands + (decimals ? this.decimalSeparator + decimals : '');\n\n    setTimeout(() => {\n      this.formGroup.controls[this.field.config.model].patchValue(Number(controlValue));\n      this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n    });\n  }\n\n  public returnBuildingError() {\n    return console.error(\n      'GS Form building err: Please provide country for currency field:' + '\\n\\n' +\n      'In your component make sure you are passing a valid country to `GCurrencyField`:' + '\\n\\n' +\n      '\\xa0' + 'public formFields: GFormFields = [' + '\\n' +\n      '\\xa0\\xa0' + 'new GCurrencyField({' + '\\n' +\n      '\\xa0\\xa0\\xa0' + `model: 'currency',` + '\\n' +\n      '\\xa0\\xa0\\xa0' + `country: GFieldCountryCode.CO` + '\\n' +\n      '\\xa0\\xa0\\xa0' + '// other properties' + '\\n' +\n      '\\xa0\\xa0' + '}),' + '\\n' +\n      '\\xa0' + '];' + '\\n\\n' +\n      'Or In your component make sure you are passing a valid country to `GFormOptions`:' + '\\n\\n' +\n      '\\xa0' + 'public formOptions: GFormOptions = {' + '\\n' +\n      '\\xa0\\xa0' + 'country: GFieldCountryCode.CO' + '\\n' +\n      '\\xa0\\xa0' + '// other properties' + '\\n' +\n      '\\xa0' + '};' + '\\n\\n'\n    );\n  }\n\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { GTwoDataInput } from '../../gs-forms.widgets';\nimport { GFieldValidatorType, GFieldValueType } from '../../gs-forms.enums';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n// TODO: add error validators\nenum TwoDataInputErrors {\n  RIGHT_MIN,\n  LEFT_MIN,\n  REQUIRED\n}\n\n@Component({\n  selector: 'gs-two-data-input',\n  templateUrl: './two-data-input.component.html',\n  styleUrls: ['./two-data-input.component.sass']\n})\nexport class GsTwoDataInputComponent extends GsGenericFieldComponent implements OnChanges {\n  @Input() public field: GTwoDataInput;\n\n  public leftFieldValue: any;\n  public rightFieldValue: any;\n  public leftFieldType: any;\n  public rightFieldType: any;\n  public leftFieldPlaceholder: string;\n  public rightFieldPlaceholder: string;\n  public valueType = GFieldValueType;\n  public fieldValidatorType = GFieldValidatorType;\n  public rightFieldTouched = false;\n  public leftFieldTouched = false;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field.currentValue) {\n      this.field = changes.field.currentValue;\n\n      if (this.field.config.value) {\n        this.leftFieldValue = this.field.config.value.left || null;\n        this.rightFieldValue = this.field.config.value.right || null;\n      }\n\n      if (this.field.config.options) {\n        this.leftFieldType = this.field.config.options.left ? this.field.config.options.left.type || null : null;\n        this.rightFieldType = this.field.config.options.right ? this.field.config.options.right.type || null : null;\n        this.leftFieldPlaceholder = this.field.config.options.left ? this.field.config.options.left.placeholder || null : null;\n        this.rightFieldPlaceholder = this.field.config.options.right ? this.field.config.options.right.placeholder || null : null;\n      }\n    }\n  }\n\n  public setGrid(): object {\n    if (!this.field.config.grid) {\n      return null;\n    }\n\n    const grid = this.field.config.grid[0] + ' max-content ' + this.field.config.grid[1];\n    return { 'grid-template-columns': grid };\n  }\n\n  public onUpdateValue(right: boolean) {\n    if (!this.rightFieldTouched && right) {\n      this.rightFieldTouched = true;\n    }\n\n    if (!this.leftFieldTouched && !right) {\n      this.leftFieldTouched = true;\n    }\n\n    const updatedValue = {\n      left: this.leftFieldValue,\n      right: this.rightFieldValue\n    };\n\n    if (updatedValue.left && updatedValue.right) {\n      this.formGroup.controls[this.field.config.model].patchValue(updatedValue);\n      this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n    } else {\n      this.formGroup.controls[this.field.config.model].patchValue(null);\n    }\n  }\n\n  public checkMinMaxValidator(input: string, validator: string) {\n    if (this.field.config.options && this.field.config.options[input] && this.field.config.options[input].type) {\n      if (this.field.config.options[input].type === this.valueType.NUMBER) {\n        if (this.field.config.options[input].validators\n          && this.field.config.options[input].validators[this.fieldValidatorType[validator]]) {\n          return this.field.config.options[input].validators[this.fieldValidatorType[validator]];\n        } else if (this.field.config.validators && this.field.config.validators[this.fieldValidatorType[validator]]) {\n          return this.field.config.validators[this.fieldValidatorType[validator]];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public requiredText(right: boolean) {\n    return right\n      ? this.formsService.getValidationMessage('ERR_REQUIRED_TWO_DATA_RIGHT')\n      : this.formsService.getValidationMessage('ERR_REQUIRED_TWO_DATA_LEFT');\n  }\n\n  public validateRequired(right: boolean) {\n    const input = right ? 'right' : 'left';\n\n    return this.field.config.options[input].validators &&\n      this[`${input}FieldTouched`] &&\n      this.field.config.options[input].validators.required &&\n      !this[`${input}FieldValue`];\n  }\n\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { GDropdownField } from '../../gs-forms.widgets';\nimport { GFieldOptionValues } from '../../gs-forms.models';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.sass']\n})\nexport class GsDropdownComponent extends GsGenericFieldComponent implements OnChanges {\n  @Input() public field: GDropdownField;\n  @Input() public fieldOption: GFieldOptionValues;\n\n  public dropdownTextValue: string;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fieldOption && changes.fieldOption.currentValue) {\n      this.fieldOption = changes.fieldOption.currentValue;\n    } else {\n      this.fieldOption = this.field.config.optionValues;\n    }\n\n    if (changes.field && changes.field.currentValue.config && !changes.field.currentValue.config.value) {\n      this.field.config.value = null;\n      this.dropdownTextValue = this.field.config.placeholder || this.field.config.label || this.field.config.model;\n    } else if (changes.field && changes.field.currentValue.config && changes.field.currentValue.config.value) { // if changes has a value\n      this.field.config.value = changes.field.currentValue.config.value;\n      this.dropdownTextValue = this.setDropdownValue();\n    }\n\n    this.formGroup.controls[this.field.config.model].patchValue(this.field.config.value);\n    this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n  }\n\n  public changeValue(text: string, value: string) {\n    this.dropdownTextValue = text;\n    this.field.config.value = value;\n    this.formGroup.controls[this.field.config.model].patchValue(this.field.config.value);\n    this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n  }\n\n  private setDropdownValue(): string {\n    const option = this.fieldOption.find(elem => elem.value === this.field.config.value);\n    return option && option.text ? option.text :\n      this.field.config.placeholder || this.field.config.label || this.field.config.model;\n  }\n\n  public resetField() {\n    this.dropdownTextValue = this.field.config.placeholder || this.field.config.label || this.field.config.model;\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { GNumberField } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-number-input',\n  templateUrl: './number-input.component.html',\n  styleUrls: ['./number-input.component.sass']\n})\nexport class GsNumberInputComponent extends GsGenericFieldComponent {\n  @Input() public field: GNumberField;\n\n  public setPresicion(input: { value: string }): void {\n    const value = input.value;\n    const pointIndex = value.indexOf('.');\n\n    if (pointIndex >= 0) {\n      const precision = this.field.config.precision || 3;\n      const valueLeft = value.substr(0, pointIndex);\n      const valueRight = value.substr(pointIndex, precision);\n      input.value = valueLeft + valueRight;\n    } else {\n      input.value = value;\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { GPasswordField } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-password-input',\n  templateUrl: './password-input.component.html',\n  styleUrls: ['./password-input.component.sass']\n})\nexport class GsPasswordInputComponent extends GsGenericFieldComponent {\n  @Input() public field: GPasswordField;\n\n  public toggle: boolean;\n\n  public toggleInputType() {\n    this.toggle = !this.toggle;\n  }\n}\n","import { Component, Input, ViewChild, ElementRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { GPhoneField } from '../../gs-forms.widgets';\nimport { GFieldValidatorType, GFieldCountryCode } from '../../gs-forms.enums';\nimport { LOCATION } from '../../gs-forms.constants';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-phone-input',\n  templateUrl: './phone-input.component.html',\n  styleUrls: ['./phone-input.component.sass']\n})\nexport class GsPhoneInputComponent extends GsGenericFieldComponent implements OnChanges {\n  @Input() public field: GPhoneField;\n  @Input() private countryGlobal: GFieldCountryCode;\n\n  @ViewChild('inputElement', { static: true }) inputElement: ElementRef;\n\n  public countryCode: string;\n  public country: string;\n  public countryCodeOptions: Array<{ code: string, country: string }>;\n  public showCountryOptions = false;\n  public phoneMask: string;\n  public editCountry: boolean;\n  public value = '';\n  public touched = false;\n  public invalid = false;\n\n  public fieldValidatorType = GFieldValidatorType;\n\n  ngOnChanges(changes: SimpleChanges) {\n    let location = null;\n\n    if (changes.field && changes.field.currentValue.config.country) {\n      location = LOCATION[changes.field.currentValue.config.country];\n\n    } else if (changes.countryGlobal && changes.countryGlobal.currentValue) {\n      location = LOCATION[changes.countryGlobal.currentValue];\n\n    } else {\n      return this.returnBuildingError();\n    }\n\n    this.phoneMask = location.phoneFormat.mask;\n\n    if (changes.field.currentValue.config.value) {\n      let phoneValue: any;\n\n      if (changes.field.currentValue.config.value.startsWith(location.phoneFormat.code, 0)) {\n        phoneValue = changes.field.currentValue.config.value.substring(2);\n      } else {\n        phoneValue = changes.field.currentValue.config.value;\n      }\n\n      if (phoneValue.phone) {\n        this.value = phoneValue.phone.toString();\n        this.country = phoneValue.code || location.phoneFormat.code;\n        this.countryCode = phoneValue.alpha2Code.toLowerCase() || location.country.alpha2Code.toLowerCase();\n      } else {\n        this.value = phoneValue.toString();\n        this.country = location.phoneFormat.code;\n        this.countryCode = location.country.alpha2Code.toLowerCase();\n      }\n\n      this.updatePhoneMask(this.countryCode);\n    } else {\n      this.country = location.phoneFormat.code;\n      this.countryCode = location.country.alpha2Code.toLowerCase();\n      this.updatePhoneMask(this.countryCode);\n    }\n\n    this.editCountry = changes.field.currentValue.config.editCountry;\n    this.countryCodeOptions = this.setCountryCodeOptions();\n\n    this.formatPhone(false, false);\n  }\n\n  public formatPhone(keyup: boolean, touched = true) {\n    this.touched = touched;\n    const inputVal = this.value || '';\n    this.invalid = false;\n\n    // mark input as dirty\n    if (keyup) {\n      this.formGroup.controls[this.field.config.model].markAsDirty();\n    }\n\n    let j = 0;\n    const pattern = this.phoneMask;\n    const sign1 = '0';\n    const sign2 = ' ';\n    const patternLength = pattern.replace(/-/gi, '').length;\n    const oldString = inputVal.replace(/\\D/g, '');\n    const newString = [];\n    const sRegEx = new RegExp(sign2, 'gi');\n    const cleanString = oldString.replace(sRegEx, '');\n\n    if (cleanString.length > patternLength) {\n      return oldString.substring(0, pattern.length);\n    }\n\n    for (let i = 0; i < pattern.length; i++) {\n      if (j === cleanString.length) {\n        break;\n      }\n\n      if (pattern[i] === sign1) {\n        newString[i] = cleanString[j];\n        j++;\n      } else if (pattern[i] === sign2) {\n        newString[i] = sign2;\n      }\n    }\n\n    this.value = newString.join('');\n    if (inputVal === '') {\n      this.formGroup.controls[this.field.config.model].patchValue(null);\n      return;\n    } else {\n      this.invalid = inputVal.length < this.phoneMask.length || inputVal.length > this.phoneMask.length ? true : false;\n      const controlValue = inputVal;\n      this.formGroup.controls[this.field.config.model].patchValue({\n        code: this.country,\n        alpha2Code: this.countryCode,\n        phone: controlValue.replace(/\\s/g, '')\n      });\n      this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n    }\n  }\n\n  public updatePhoneMask(country: string) {\n    const location = LOCATION[country];\n\n    this.phoneMask = location.phoneFormat.mask;\n    this.countryCode = location.country.alpha2Code.toLowerCase();\n    this.country = location.phoneFormat.code;\n\n    this.formatPhone(false);\n    this.showCountryOptions = false;\n  }\n\n  private setCountryCodeOptions() {\n    const countryCodeOptions = [];\n\n    for (const key in LOCATION) {\n      if (LOCATION.hasOwnProperty(key)) {\n        if (!LOCATION[key].disabled) {\n          countryCodeOptions.push({\n            code: LOCATION[key].phoneFormat.code,\n            country: LOCATION[key].country.alpha2Code.toLowerCase()\n          });\n        }\n      }\n    }\n\n    return countryCodeOptions;\n  }\n\n  public toggleCountryOptions(close?: boolean) {\n    this.showCountryOptions = close ? false : !this.showCountryOptions;\n  }\n\n  public errorText(error: string) {\n    return this.formsService.getValidationMessage(error);\n  }\n\n  public returnBuildingError() {\n    return console.error(\n      'GS Form building err: Please provide country for phone field:' + '\\n\\n' +\n      'In your component make sure you are passing a valid country to `GPhoneField`:' + '\\n\\n' +\n      '\\xa0' + 'public formFields: GFormFields = [' + '\\n' +\n      '\\xa0\\xa0' + 'new GPhoneField({' + '\\n' +\n      '\\xa0\\xa0\\xa0' + `model: 'phone',` + '\\n' +\n      '\\xa0\\xa0\\xa0' + `country: GFieldCountryCode.CO` + '\\n' +\n      '\\xa0\\xa0\\xa0' + '// other properties' + '\\n' +\n      '\\xa0\\xa0' + '}),' + '\\n' +\n      '\\xa0' + '];' + '\\n\\n' +\n      'Or In your component make sure you are passing a valid country to `GFormOptions`:' + '\\n\\n' +\n      '\\xa0' + 'public formOptions: GFormOptions = {' + '\\n' +\n      '\\xa0\\xa0' + 'country: GFieldCountryCode.CO' + '\\n' +\n      '\\xa0\\xa0' + '// other properties' + '\\n' +\n      '\\xa0' + '};' + '\\n\\n'\n    );\n  }\n}\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { GRadioField } from '../../gs-forms.widgets';\nimport { GFieldOptionValues } from '../../gs-forms.models';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-radio-button',\n  templateUrl: './radio-button.component.html',\n  styleUrls: ['./radio-button.component.sass']\n})\nexport class GsRadioButtonComponent extends GsGenericFieldComponent implements OnChanges {\n  @Input() public field: GRadioField;\n  @Input() public fieldOption: GFieldOptionValues;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fieldOption && changes.fieldOption.currentValue) {\n      this.fieldOption = changes.fieldOption.currentValue;\n    } else {\n      this.fieldOption = this.field.config.optionValues;\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { GTextField } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.sass']\n})\nexport class GsTextInputComponent extends GsGenericFieldComponent {\n  @Input() public field: GTextField;\n}\n","import { Component, Input } from '@angular/core';\nimport { GTextareaField } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-textarea',\n  templateUrl: './textarea.component.html',\n  styleUrls: ['./textarea.component.sass']\n})\nexport class GsTextareaComponent  extends GsGenericFieldComponent {\n  @Input() public field: GTextareaField;\n}\n","import { Component, Input } from '@angular/core';\nimport { GToggleField } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.sass']\n})\nexport class GsToggleComponent extends GsGenericFieldComponent {\n  @Input() public field: GToggleField;\n}\n","import { Component, Input, ViewChild, ElementRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { GSeparatedByComma } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-separated-by-comma',\n  templateUrl: './separated-by-comma.component.html',\n  styleUrls: ['./separated-by-comma.component.sass']\n})\nexport class GsSeparatedByCommaComponent extends GsGenericFieldComponent implements OnChanges {\n  @Input() public field: GSeparatedByComma;\n  @ViewChild('inputElement', { static: true }) inputElement: ElementRef;\n  public fieldOption: Array<string> = [];\n  public value = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field && changes.field.currentValue && changes.field.currentValue.config.value) {\n      this.fieldOption = changes.field.currentValue.config.value.split(',');\n    }\n  }\n\n  public focusInput() {\n    this.inputElement.nativeElement.focus();\n  }\n\n  public removeValue(valIndex: number) {\n    this.fieldOption.splice(valIndex, 1);\n  }\n\n  public disableEnter(event: Event) {\n    event.preventDefault();\n  }\n\n  public removeLastValue(event: any) {\n    if (this.value === '' && event.keyCode === 8) {\n      this.fieldOption.pop();\n      return;\n    }\n  }\n\n  public removeAll() {\n    this.fieldOption = [];\n  }\n\n  public addValue(event: any) {\n    if (this.value === '' || this.value === ',') {\n      return;\n    }\n\n    if (event.keyCode === 188 || event.keyCode === 13) {\n      const value = this.value.replace(/,/g, '');\n\n      if (value === '') {\n        return;\n      }\n\n      this.fieldOption.push(value);\n      const valuesAsString = this.fieldOption.join(',');\n      this.formGroup.controls[this.field.config.model].patchValue(valuesAsString);\n      this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n      this.value = '';\n      return;\n    }\n  }\n}\n","import { Component, Input, OnInit, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\nimport { GFieldFile } from '../../gs-forms.widgets';\n\n@Component({\n  selector: 'gs-file-input',\n  templateUrl: './file-input.component.html',\n  styleUrls: ['./file-input.component.sass']\n})\nexport class GsFileInputComponent extends GsGenericFieldComponent implements OnInit, OnChanges {\n  @Input() public field: GFieldFile;\n  @Output() private fieldChanged = new EventEmitter<{ file: File; model: string; }>();\n\n  public size: number;\n  public selectedFile: File;\n  public loading = false;\n  private returnFile: boolean;\n\n  private supportedFilesTranslates = {\n    es: 'Archivos soportados',\n    en: 'Supported files',\n    pt: 'Arquivos suportados'\n  };\n  private supportedSizeFilesTranslates = {\n    es: `Tamaño limite`,\n    en: 'Size limit',\n    pt: 'Limite de tamanhos'\n  };\n  public supportedFilesText: string;\n  public supportedSizeFilesText: string;\n\n  private errorTranslates = {\n    es: 'Ocurrio un error al subir el archivo. Por favor intenta de nuevo.',\n    en: 'There was an error uploading the file. Please try again.',\n    pt: 'Ocorreu um erro ao fazer o upload do arquivo. Por favor tente novamente.'\n  };\n  public errorText: string;\n\n  ngOnInit() {\n    this.supportedFilesText = this.supportedFilesTranslates[this.formsService.getLang() || 'en'];\n    this.supportedSizeFilesText = this.supportedSizeFilesTranslates[this.formsService.getLang() || 'en'];\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field.currentValue) {\n      if (this.field.config.value) {\n        this.selectedFile = this.field.config.value;\n        this.formGroup.controls[this.field.config.model].patchValue(this.field.config.value);\n        this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n      }\n\n      if (this.field.config.returnFile) {\n        this.returnFile = true;\n      } else {\n        this.returnFile = false;\n      }\n\n      if (this.field.config.size) {\n\n      }\n    }\n  }\n\n  public onFileChange($event: any): void {\n    this.loading = true;\n\n    const reader = new FileReader();\n    const file: File = $event.target.files[0];\n    const fileName = file.name.split('.').reverse()[1];\n    this.field.config.value = file;\n\n    this.size = file.size;\n\n    if (!this.validFileType(file) || !this.validFileSize()) {\n      this.loading = false;\n    }\n\n    if (file.name.match(/.(jpg|jpeg|png|gif)$/i)) {\n      reader.readAsDataURL(file);\n      reader.onload = (e) => {\n        this.selectedFile = file;\n      };\n    } else {\n      this.selectedFile = file;\n    }\n\n    this.fieldChanged.emit({file, model: this.field.config.model});\n\n    if (this.returnFile) {\n      this.formGroup.controls[this.field.config.model].patchValue(file);\n      this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n      this.loading = false;\n    } else {\n      this.processFile(file);\n    }\n  }\n\n  private processFile(file: any): void {\n    const reader = new FileReader();\n    const url = this.field.config.api.url;\n    const method = this.field.config.api.method;\n    const paramName = this.field.config.api.fileParamName;\n    this.errorText = null;\n\n    reader.addEventListener('load', () => {\n      this.formsService.uploadFileServices(url, method, file, paramName)\n        .subscribe(\n          response => {\n            this.loading = false;\n            this.formGroup.controls[this.field.config.model].patchValue(response);\n            this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n          }, error => {\n            this.loading = false;\n            console.error('Unable to upload the image. Error:', error);\n            this.errorText = this.errorTranslates[this.formsService.getLang() || 'en'];\n            this.formGroup.controls[this.field.config.model].patchValue('unableToUploadFile');\n            this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n            this.formGroup.controls[this.field.config.model].setErrors({ unableToUploadFile: true });\n          });\n    });\n\n    reader.readAsDataURL(file);\n  }\n\n  public returnFileSize(size: number): string {\n    if (size < 1024) {\n      return size + 'bytes';\n    } else if (size >= 1024 && size < 1048576) {\n      return (size / 1024).toFixed(1) + 'KB';\n    } else if (size >= 1048576) {\n      return (size / 1048576).toFixed(1) + 'MB';\n    }\n  }\n\n  public validFileSize(): boolean {\n    return this.field.config.size < this.size;\n  }\n\n  private validFileType(file: File): boolean {\n    return this.field.config.accept.replace(/ /g, '').split(',').includes(`.${file.type.split('/')[1]}`);\n  }\n\n  public resetField() {\n    this.selectedFile = null;\n  }\n\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { GDropdownField } from '../../gs-forms.widgets';\nimport { GFieldOptionValues, GFieldExistsOptionValues, GFieldOptionValueExists, GFieldOptionValue } from '../../gs-forms.models';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-multiselect',\n  templateUrl: './multiselect.component.html',\n  styleUrls: ['./multiselect.component.sass']\n})\nexport class GsMultiselectComponent extends GsGenericFieldComponent implements OnChanges {\n  @Input() public field: GDropdownField;\n  @Input() public fieldOption: GFieldOptionValues;\n\n  public options: GFieldExistsOptionValues = [];\n  public noSelection = true;\n  public touched = false;\n  public showMultiselectOptions = false;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fieldOption && changes.fieldOption.currentValue) {\n      this.fieldOption = changes.fieldOption.currentValue;\n    } else {\n      this.fieldOption = this.field.config.optionValues;\n    }\n\n    this.options = this.fieldOption;\n\n    if (changes.field && changes.field.currentValue.config.value) {\n      const currentValues = changes.field.currentValue.config.value;\n      currentValues.forEach((option: GFieldOptionValue) => {\n        this.toggleOption(option, false);\n      });\n    }\n  }\n\n  public toggleOption(option: GFieldOptionValueExists, touched = true) {\n    const selectedOptions: GFieldOptionValues = [];\n    this.noSelection = true;\n    this.touched = touched;\n\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options[i].value === option.value) {\n        this.options[i].exists = !option.exists;\n      }\n\n      if (this.options[i].exists === true) {\n        this.noSelection = false;\n\n        selectedOptions.push({\n          text: this.options[i].text,\n          value: this.options[i].value\n        });\n\n        this.formGroup.controls[this.field.config.model].patchValue(selectedOptions);\n        this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n      }\n    }\n  }\n\n  public toggleMultiselectOptions(value = !this.showMultiselectOptions) {\n    this.showMultiselectOptions = value;\n  }\n\n  public requiredText() {\n    return this.formsService.getValidationMessage('ERR_REQUIRED');\n  }\n\n}\n","import { Component, Input } from '@angular/core';\nimport { GColorPickerField } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n@Component({\n  selector: 'gs-color-picker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.sass']\n})\nexport class GsColorPickerComponent extends GsGenericFieldComponent {\n  @Input() public field: GColorPickerField;\n\n  public setColorValue() {\n    this.formGroup.controls[this.field.config.model].patchValue(\n      this.formGroup.value[this.field.config.model]\n    );\n    this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n  }\n}\n","import { Component, Input, ViewChild, ElementRef, OnChanges, SimpleChanges, OnInit } from '@angular/core';\nimport { GMapField } from '../../gs-forms.widgets';\nimport { LOCATION } from '../../gs-forms.constants';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\nconst WINDOW: any = window;\n\n@Component({\n  selector: 'gs-map-field',\n  templateUrl: './map-field.component.html',\n  styleUrls: ['./map-field.component.sass']\n})\nexport class GsMapFieldComponent extends GsGenericFieldComponent implements OnInit, OnChanges {\n  @Input() public field: GMapField;\n  @Input() private googleMapApiKey: string;\n\n  @ViewChild('mapRef', { static: false }) mapElement: ElementRef;\n  @ViewChild('search', { static: false }) search: ElementRef;\n\n  public showMap = false;\n  public showMapModal = false;\n  private latlng = LOCATION.co.lanLng;\n  private map: any;\n  private marker: any;\n  public address: any = [];\n  public addressInput = '';\n\n  ngOnInit(): void {\n    this.showMapModal = this.field.config.showMap;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field.currentValue && changes.field.currentValue.config.value) {\n      const value = changes.field.currentValue.config.value;\n\n      if (value.city && value.country) {\n        this.addressInput = `${value.address}, ${value.city}, ${value.country}`;\n      } else {\n        this.addressInput = value.address;\n      }\n\n      this.selectAddress(this.addressInput, true);\n\n      if (value.lat && value.lng) {\n        this.latlng = {\n          lat: value.lat,\n          lng: value.lng\n        };\n      }\n    } else {\n      this.setLanLngGeolocation();\n    }\n\n    this.valid(false);\n  }\n\n  private setLanLngGeolocation(): void {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.latlng = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    }\n  }\n\n  public valid(keyup, valueGoogleSearch?): void {\n    // mark input as dirty\n    if (keyup) {\n      this.formGroup.controls[this.field.config.model].markAsDirty();\n    }\n\n    if (this.addressInput === '') {\n      this.formGroup.controls[this.field.config.model].patchValue(null);\n    } else if (valueGoogleSearch) {\n      this.selectAddress(valueGoogleSearch, false);\n    } else {\n      this.selectAddress(this.addressInput, false);\n    }\n  }\n\n  public loadMap(): void {\n    if (!this.showMapModal) {\n      this.getSearchAddress();\n      return;\n    }\n\n    this.toggleMap();\n\n    if (!this.mapElement.nativeElement.hasChildNodes() && this.showMapModal) {\n      this.map = new WINDOW.google.maps.Map(this.mapElement.nativeElement, {\n        center: this.latlng,\n        zoom: 15,\n        disableDefaultUI: true,\n        mapTypeId: 'roadmap'\n      });\n\n      if (this.latlng) {\n        this.marker = new WINDOW.google.maps.Marker({ position: this.latlng, map: this.map });\n      }\n\n      this.getSearchAddress();\n\n      this.map.addListener('click', (mapsMouseEvent) => {\n        this.latlng = {\n          lat: mapsMouseEvent.latLng.lat(),\n          lng: mapsMouseEvent.latLng.lng()\n        };\n\n        this.addMarker();\n      });\n    }\n  }\n\n  public toggleMap(): void {\n    this.address = [];\n    this.showMap = !this.showMap;\n  }\n\n  private getSearchAddress(): void {\n    const searchBox = new WINDOW.google.maps.places.SearchBox(this.search.nativeElement);\n\n    searchBox.addListener('places_changed', () => {\n      const places = searchBox.getPlaces();\n\n      if (places.length === 0) {\n        return;\n      }\n\n      if (!this.showMapModal) {\n        this.valid(false, places[0].formatted_address);\n        return;\n      }\n\n      const bounds = new WINDOW.google.maps.LatLngBounds();\n\n      places.forEach((place) => {\n        if (!place.geometry) {\n          return;\n        }\n\n        this.latlng = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        };\n\n        this.addMarker();\n\n        if (place.geometry.viewport) {\n          bounds.union(place.geometry.viewport);\n        } else {\n          bounds.extend(place.geometry.location);\n        }\n        this.map.fitBounds(bounds);\n      });\n    });\n  }\n\n  private addMarker(): void {\n    if (this.marker) {\n      this.marker.setMap(null);\n    }\n    this.marker = new WINDOW.google.maps.Marker({ position: this.latlng, map: this.map });\n    this.getAddress();\n  }\n\n  private getAddress(): void {\n    this.formsService.getAddress(this.latlng.lat, this.latlng.lng, this.googleMapApiKey)\n      .subscribe(address => this.address = address.results);\n  }\n\n  public selectAddress(address: string, patch: boolean): void {\n    this.addressInput = address;\n    const addressValue = {\n      fullAddress: address,\n      address: address.split(', ')[0] || address,\n      city: address.split(', ')[1] || '',\n      country: address.split(', ')[2] || '',\n      lat: this.latlng.lat || '',\n      lng: this.latlng.lng || ''\n    };\n\n    setTimeout(() => {\n      this.formGroup.controls[this.field.config.model].patchValue(addressValue);\n      this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n    }, 500);\n\n    if (!patch) {\n      this.toggleMap();\n    }\n  }\n\n  public selectAddressText(): string {\n    return this.formsService.getMessage('SELECT_ADDRESS');\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { GDivider } from '../../gs-forms.widgets';\n\n@Component({\n  selector: 'gs-divider',\n  templateUrl: './divider.component.html',\n  styleUrls: ['./divider.component.sass']\n})\nexport class GsDividerComponent {\n  @Input() public divider: GDivider;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { GButton } from './../../gs-forms.widgets';\nimport { GFieldValueButtonType } from '../../gs-forms.enums';\n\n@Component({\n  selector: 'gs-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.sass']\n})\nexport class GsButtonComponent {\n  @Input() public button: GButton;\n  @Output() hdlAction = new EventEmitter(null);\n\n  public fieldValueButtonType = GFieldValueButtonType;\n\n  public action(action: string) {\n    this.hdlAction.emit({\n      action,\n      id: this.button.config.id\n    });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { GShowData } from '../../gs-forms.widgets';\n\n@Component({\n  selector: 'gs-show-data',\n  templateUrl: './show-data.component.html',\n  styleUrls: ['./show-data.component.sass']\n})\nexport class GsShowDataComponent implements OnInit {\n  @Input() public data: GShowData;\n  public fieldValue = '';\n\n  ngOnInit() {\n    this.fieldValue = this.data.config && this.data.config.value ? this.data.config.value.toString() :\n      this.data.config.placeholder ||\n      this.data.config.label ||\n      this.data.config.model;\n  }\n}\n","import { Component, Input, SimpleChanges, OnChanges, OnInit } from '@angular/core';\nimport { GTimeField } from '../../gs-forms.widgets';\nimport { GsGenericFieldComponent } from '../_generic-field/_generic-field.component';\n\n\n@Component({\n  selector: 'gs-timepicker',\n  templateUrl: './timepicker.component.html',\n  styleUrls: ['./timepicker.component.sass']\n})\nexport class GsTimePickerComponent extends GsGenericFieldComponent implements OnChanges, OnInit {\n  @Input() public field: GTimeField;\n\n  public fieldValueHours: any;\n  public fieldValueMinutes: any;\n  public fieldTouchedHours = false;\n  public fieldTouchedMinutes = false;\n  public validateFormatHours = false;\n  public validateFormatMinutes = false;\n  public validateRequiredHours = false;\n  public validateRequiredMinutes = false;\n\n  public errorsTextArray: {\n    requiredMinutes: string;\n    requiredHours: string;\n    requiredFulltime: string;\n    patternMinutes: string;\n    patternHours: string;\n    patternFulltime: string;\n  };\n\n  ngOnInit(): void {\n    this.errorsTextArray = {\n      requiredMinutes: this.formsService.getValidationMessage('ERR_REQUIRED_MIN'),\n      requiredHours: this.formsService.getValidationMessage('ERR_REQUIRED_HOUR'),\n      requiredFulltime: this.formsService.getValidationMessage('ERR_REQUIRED_FULLTIME'),\n      patternMinutes: this.formsService.getValidationMessage('ERR_PATTERN_MIN'),\n      patternHours: this.formsService.getValidationMessage('ERR_PATTERN_HOUR'),\n      patternFulltime: this.formsService.getValidationMessage('ERR_PATTERN_FULLTIME')\n    };\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field.currentValue) {\n      this.field = changes.field.currentValue;\n      if (this.field.config.value) {\n        this.fieldValueHours = this.field.config.value.toString().split(':')[0] || '';\n        this.fieldValueMinutes = this.field.config.value.toString().split(':')[1] || '';\n      }\n    }\n  }\n\n  public onUpdateValue(isMinuteInput: boolean = false) {\n    this.validateFormatHours = false;\n    this.validateFormatMinutes = false;\n    if (!this.fieldTouchedMinutes && isMinuteInput) {\n      this.fieldTouchedMinutes = true;\n    }\n\n    if (!this.fieldTouchedHours && !isMinuteInput) {\n      this.fieldTouchedHours = true;\n    }\n\n    if (this.fieldValueHours && !(this.fieldValueHours > 0 && this.fieldValueHours <= 24) && this.fieldTouchedHours) {\n      this.validateFormatHours = true;\n    }\n\n    if (this.fieldValueMinutes && !(this.fieldValueMinutes >= 0 && this.fieldValueMinutes < 60) && this.fieldTouchedMinutes) {\n      this.validateFormatMinutes = true;\n    }\n\n    const updatedValue = {\n      fullTime: `${this.fieldValueHours}:${this.fieldValueMinutes}`,\n      hour: this.fieldValueHours,\n      min: this.fieldValueMinutes\n    };\n\n    if (updatedValue.hour && updatedValue.min && !this.validateFormatHours && !this.validateFormatMinutes) {\n      this.formGroup.controls[this.field.config.model].patchValue(updatedValue);\n      this.formGroup.controls[this.field.config.model].updateValueAndValidity();\n    } else {\n      this.formGroup.controls[this.field.config.model].patchValue(null);\n    }\n  }\n\n  public validateRequired(isMinuteInput?: boolean) {\n    const input = isMinuteInput ? 'Minutes' : 'Hours';\n    this[`validateRequired${input}`] = this[`fieldTouched${input}`] &&\n      (this[`fieldValue${input}`] === undefined || this[`fieldValue${input}`] === '');\n    return this[`validateRequired${input}`];\n  }\n}\n","import {\n  Component,\n  Input,\n  Inject,\n  HostBinding,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  ViewChildren,\n  QueryList\n} from '@angular/core';\nimport { FormGroup, Validators, ValidationErrors } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { GsFormsService } from './gs-forms.service';\nimport { GFieldSelector, GFieldValidatorType, GFieldValueButtonType } from './gs-forms.enums';\nimport { GFormFields, GStyles, GFormOptions, GField } from './gs-forms.models';\nimport { GsFileInputComponent, GsDatePickerComponent, GsDropdownComponent } from './gs-fields';\n\n@Component({\n  selector: 'gs-form',\n  templateUrl: './gs-form.component.html',\n  styleUrls: ['./gs-form.component.sass']\n})\nexport class GsFormComponent implements AfterViewChecked, OnChanges {\n  private destroyed$ = new Subject();\n  /**\n   * Input: formOptions: GFormOptions\n   *\n   * @description\n   * Set custom configuration to the form\n   *\n   * @example\n   * public formOptions: GFormOptions = {\n   *   country: GFieldCountryCode.CO,\n   *   fieldValues: {\n   *     checkbox: [\n   *       {\n   *         value: true,\n   *         text: 'true'\n   *       }\n   *     ]\n   *   },\n   *   layout: {\n   *     columns: 'repeat(4, 1fr)',\n   *   }\n   * };\n   */\n  @Input() public formOptions: GFormOptions;\n  /**\n   * Input: formFields: GFormFields\n   *\n   * @description\n   * Form fields array\n   *\n   * @example\n   * public formFields: GFormFields = [\n   *   new GTextField({\n   *     model: 'text',\n   *     label: 'TEXT',\n   *     placeholder: 'TEXT_INPUT',\n   *     value: 'Hello text input',\n   *     validators: {\n   *       [GFieldValidatorType.REQUIRED]: true\n   *     },\n   *   }),\n   * ];\n   */\n  @Input() public formFields: GFormFields;\n  /**\n   * Get form group. formGroup: FormGroup `form`\n   */\n  @Output() private form = new EventEmitter<FormGroup>();\n  /**\n   * Get form group changes. formGroup: FormGroup `form`\n   */\n  @Output() private formChanges = new EventEmitter<FormGroup>();\n  /**\n   * Get button event selected\n   */\n  @Output() private customButtonClick = new EventEmitter<string>();\n  /**\n   * Get form group changes. formGroup: FormGroup `form`\n   */\n  @Output() private fieldChanged = new EventEmitter<{ [key: string]: string }>();\n\n  @ViewChildren(GsFileInputComponent) fileInputComponent: QueryList<GsFileInputComponent>;\n  @ViewChildren(GsDatePickerComponent) datePickerComponent: QueryList<GsDatePickerComponent>;\n  @ViewChildren(GsDropdownComponent) dropdownComponent: QueryList<GsDropdownComponent>;\n\n  public formGroup: FormGroup;\n  public fieldSelector = GFieldSelector;\n  public fieldValidatorType = GFieldValidatorType;\n  private customStyles: GStyles;\n  public googleMapApiKey: string;\n\n  constructor(\n    private formsService: GsFormsService,\n    private sanitizer: DomSanitizer,\n    private cdRef: ChangeDetectorRef,\n    @Inject('customStyles') customStyles,\n    @Inject('googleMapApiKey') apikey\n  ) {\n    this.customStyles = customStyles;\n    this.googleMapApiKey = apikey;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes && changes.formFields && changes.formFields.currentValue) {\n      if (this.formGroup) {\n        this.formGroup.reset();\n      }\n\n      const form = this.formsService.buildForm(changes.formFields.currentValue);\n\n      this.formFields = changes.formFields.currentValue;\n      this.formGroup = form;\n\n      this.formGroup.updateValueAndValidity();\n    }\n\n    if (this.formGroup) {\n      this.onFormChanges();\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.cdRef.detectChanges();\n  }\n\n  private onFormChanges(): void {\n    this.formGroup.valueChanges.pipe(takeUntil(this.destroyed$))\n      .subscribe(() => {\n        this.formChanges.emit(this.formGroup);\n      });\n\n    const fieldWithDisplay = this.formFields.find((field: GField) => {\n      if (field.config.displayIf && !field.notWidget) {\n        return field;\n      }\n    });\n\n    if (fieldWithDisplay) {\n      this.formGroup.controls[fieldWithDisplay.config.displayIf.model].valueChanges\n        .subscribe(() => {\n          this.formGroup.controls[fieldWithDisplay.config.model].patchValue('');\n          this.formGroup.controls[fieldWithDisplay.config.model].clearValidators();\n          this.formGroup.controls[fieldWithDisplay.config.model].updateValueAndValidity();\n        });\n    }\n  }\n\n  public submit(): void {\n    this.form.emit(this.formGroup);\n  }\n\n  public canSubmit($event): void {\n    if (this.formOptions.onErrorDisableSubmit && this.formGroup.invalid) {\n      $event.preventDefault();\n      return;\n    } else {\n      this.submit();\n    }\n  }\n\n  public isRequired(field: any): boolean {\n    return field.config.validators ? field.config.validators[this.fieldValidatorType.REQUIRED] : false;\n  }\n\n  public validateField(field: any): ValidationErrors {\n    return this.formGroup.controls[field].dirty && this.formGroup.controls[field].errors;\n  }\n\n  public getFieldError(field: any): string {\n    return this.formsService.fieldError(this.formGroup.controls[field]);\n  }\n\n  public sanitizeStyle(value: string) {\n    return this.sanitizer.bypassSecurityTrustStyle(value);\n  }\n\n  public checkCondition(field: GField) {\n    if (!field.config.displayIf) {\n      return true;\n    }\n\n    if (this.formGroup.controls[field.config.displayIf.model].value === field.config.displayIf.hasValue) {\n      const validators = [];\n      const fields = field.config.validators;\n\n      for (const validator in fields) {\n        if (Object.prototype.hasOwnProperty.call(fields, validator) && fields[validator]) {\n          validators.push(this.formsService.buildErrors(validator, fields[validator]));\n        }\n      }\n\n      if (this.formGroup.controls[field.config.model]) {\n        this.formGroup.controls[field.config.model].setValidators(Validators.compose(validators));\n        this.formGroup.controls[field.config.model].updateValueAndValidity();\n      }\n\n      return true;\n    } else if (this.formGroup.controls[field.config.model]) {\n      this.formGroup.controls[field.config.model].clearValidators();\n      this.formGroup.controls[field.config.model].updateValueAndValidity();\n    }\n\n    return false;\n  }\n\n  /**\n   * Custom styles\n   */\n  @HostBinding('attr.style')\n  public get valueAsStyle(): any {\n    let variables = '';\n\n    if (this.customStyles) {\n      // colors\n      if (this.customStyles.color) {\n        if (this.customStyles.color.font) {\n          variables = variables + `--gs-color-font: ${this.customStyles.color.font}!important;`;\n        }\n\n        if (this.customStyles.color.primary) {\n          variables = variables + `--gs-color-primary: ${this.customStyles.color.primary}!important;`;\n        }\n\n        if (this.customStyles.color.secondary) {\n          variables = variables + `--gs-color-secondary: ${this.customStyles.color.secondary}!important;`;\n        }\n\n        if (this.customStyles.color.neutral) {\n          variables = variables + `--gs-color-neutral: ${this.customStyles.color.neutral}!important;`;\n        }\n\n        if (this.customStyles.color.border) {\n          variables = variables + `--gs-color-border: ${this.customStyles.color.border}!important;`;\n        }\n\n        if (this.customStyles.color.white) {\n          variables = variables + `--gs-color-white: ${this.customStyles.color.white}!important;`;\n        }\n      }\n\n      // ui\n      if (this.customStyles.ui) {\n        // font\n        if (this.customStyles.ui.fontSize) {\n          variables = variables + `--gs-font-size: ${this.customStyles.ui.fontSize}!important;`;\n        }\n\n        // padding\n        if (this.customStyles.ui.padding) {\n          variables = variables + `--gs-padding: ${this.customStyles.ui.padding}!important;`;\n        }\n\n        // opacity\n        if (this.customStyles.ui.disabledOpacity) {\n          variables = variables + `--gs-disabled-opacity: ${this.customStyles.ui.disabledOpacity}!important;`;\n        }\n\n        // ui input\n        if (this.customStyles.ui.input) {\n          if (this.customStyles.ui.input.padding) {\n            variables = variables + `--gs-input-padding: ${this.customStyles.ui.input.padding}!important;`;\n          }\n\n          if (this.customStyles.ui.input.color) {\n            variables = variables + `--gs-input-color: ${this.customStyles.ui.input.color}!important;`;\n          }\n\n          if (this.customStyles.ui.input.background) {\n            variables = variables + `--gs-input-background: ${this.customStyles.ui.input.background}!important;`;\n          }\n\n          if (this.customStyles.ui.input.borderSize) {\n            variables = variables + `--gs-input-border-size: ${this.customStyles.ui.input.borderSize}!important;`;\n          }\n\n          if (this.customStyles.ui.input.borderStyle) {\n            variables = variables + `--gs-input-border-style: ${this.customStyles.ui.input.borderStyle}!important;`;\n          }\n\n          if (this.customStyles.ui.input.borderColor) {\n            variables = variables + `--gs-input-border-color: ${this.customStyles.ui.input.borderColor}!important;`;\n          }\n\n          if (this.customStyles.ui.input.borderRadius) {\n            variables = variables + `--gs-input-border-radius: ${this.customStyles.ui.input.borderRadius}!important;`;\n          }\n\n          if (this.customStyles.ui.input.borderTop) {\n            variables = variables + `--gs-input-border-top: ${this.customStyles.ui.input.borderTop}!important;`;\n          }\n\n          if (this.customStyles.ui.input.borderRight) {\n            variables = variables + `--gs-input-border-right: ${this.customStyles.ui.input.borderRight}!important;`;\n          }\n\n          if (this.customStyles.ui.input.borderBottom) {\n            variables = variables + `--gs-input-border-bottom: ${this.customStyles.ui.input.borderRadius}!important;`;\n          }\n\n          if (this.customStyles.ui.input.borderLeft) {\n            variables = variables + `--gs-input-border-left: ${this.customStyles.ui.input.borderLeft}!important;`;\n          }\n        }\n\n        // ui primary button\n        if (this.customStyles.ui.primaryButton) {\n          if (this.customStyles.ui.primaryButton.padding) {\n            variables = variables + `--gs-primary-button-padding: ${this.customStyles.ui.primaryButton.padding}!important;`;\n          }\n\n          if (this.customStyles.ui.primaryButton.color) {\n            variables = variables + `--gs-primary-button-color: ${this.customStyles.ui.primaryButton.color}!important;`;\n          }\n\n          if (this.customStyles.ui.primaryButton.background) {\n            variables = variables + `--gs-primary-button-background: ${this.customStyles.ui.primaryButton.background}!important;`;\n          }\n\n          if (this.customStyles.ui.primaryButton.borderColor) {\n            variables = variables + `--gs-primary-button-border-color: ${this.customStyles.ui.primaryButton.borderColor}!important;`;\n          }\n\n          if (this.customStyles.ui.primaryButton.borderRadius) {\n            variables = variables + `--gs-primary-button-border-radius: ${this.customStyles.ui.primaryButton.borderRadius}!important;`;\n          }\n        }\n\n        // ui secondary button\n        if (this.customStyles.ui.secondaryButton) {\n          if (this.customStyles.ui.secondaryButton.padding) {\n            variables = variables + `--gs-secondary-button-padding: ${this.customStyles.ui.secondaryButton.padding}!important;`;\n          }\n\n          if (this.customStyles.ui.secondaryButton.color) {\n            variables = variables + `--gs-secondary-button-color: ${this.customStyles.ui.secondaryButton.color}!important;`;\n          }\n\n          if (this.customStyles.ui.secondaryButton.background) {\n            variables = variables + `--gs-secondary-button-background: ${this.customStyles.ui.secondaryButton.background}!important;`;\n          }\n\n          if (this.customStyles.ui.secondaryButton.borderColor) {\n            variables = variables + `--gs-secondary-button-border-color: ${this.customStyles.ui.secondaryButton.borderColor}!important;`;\n          }\n\n          if (this.customStyles.ui.secondaryButton.borderRadius) {\n            variables = variables + `--gs-secondary-button-border-radius: ${this.customStyles.ui.secondaryButton.borderRadius}!important;`;\n          }\n        }\n      }\n\n      // layout\n      if (this.formOptions && this.formOptions.layout) {\n\n        if (this.formOptions.layout.columns) {\n          if (typeof this.formOptions.layout.columns === 'number') {\n            // if typeof number\n            variables = variables + `--gs-layout-columns-quantity: repeat(${this.formOptions.layout.columns}, 1fr)!important;`;\n          } else {\n            // if typeof string\n            variables = variables + `--gs-layout-columns-quantity: ${this.formOptions.layout.columns}!important;`;\n          }\n        }\n\n        if (this.formOptions.layout.innerPadding) {\n          variables = variables + `--gs-layout-padding: ${this.formOptions.layout.innerPadding}!important;`;\n        }\n      }\n\n      return this.sanitizer.bypassSecurityTrustStyle(\n        variables\n      );\n    }\n  }\n\n  public formActions(action: string, id?: string) {\n    switch (action) {\n      case GFieldValueButtonType.SUBMIT:\n        this.submit();\n        break;\n      case GFieldValueButtonType.RESET:\n        if (this.formGroup) {\n          this.formGroup.reset();\n\n          if (this.fileInputComponent !== undefined) {\n            this.fileInputComponent.forEach(el => el.resetField());\n          }\n\n          if (this.datePickerComponent !== undefined) {\n            this.datePickerComponent.forEach(el => el.resetField());\n          }\n\n          if (this.dropdownComponent !== undefined) {\n            this.dropdownComponent.forEach(el => el.resetField());\n          }\n        }\n        break;\n      case GFieldValueButtonType.CUSTOM:\n        this.customButtonClick.emit(id);\n        break;\n    }\n  }\n\n  public onFieldChanged(changes: { [key: string]: string }): void {\n    this.fieldChanged.emit(changes);\n  }\n}\n","import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n// https://github.com/changhuixu/ngx-digit-only/blob/master/projects/uiowa/digit-only/src/lib/digit-only.directive.ts\n\n@Directive({\n  selector: '[gsDigitOnly]'\n})\nexport class DigitOnlyDirective {\n  private decimalCounter = 0;\n  private navigationKeys = [\n    'Backspace',\n    'Delete',\n    'Tab',\n    'Escape',\n    'Enter',\n    'Home',\n    'End',\n    'ArrowLeft',\n    'ArrowRight',\n    'Clear',\n    'Copy',\n    'Paste'\n  ];\n  @Input() decimal ? = false;\n  inputElement: HTMLInputElement;\n\n  constructor(public el: ElementRef) {\n    this.inputElement = el.nativeElement;\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent) {\n    if (\n      this.navigationKeys.indexOf(e.key) > -1 || // Allow: navigation keys: backspace, delete, arrows etc.\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\n      (e.key === 'a' && e.metaKey === true) || // Allow: Cmd+A (Mac)\n      (e.key === 'c' && e.metaKey === true) || // Allow: Cmd+C (Mac)\n      (e.key === 'v' && e.metaKey === true) || // Allow: Cmd+V (Mac)\n      (e.key === 'x' && e.metaKey === true) || // Allow: Cmd+X (Mac)\n      (this.decimal && e.key === '.' && this.decimalCounter < 1) // Allow: only one decimal point\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n    // Ensure that it is a number and stop the keypress\n    if (e.key === ' ' || isNaN(Number(e.key))) {\n      e.preventDefault();\n    }\n  }\n\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent) {\n    if (!this.decimal) {\n      return;\n    } else {\n      this.decimalCounter = this.el.nativeElement.value.split('.').length - 1;\n    }\n  }\n\n  @HostListener('paste', ['$event'])\n  onPaste(event: ClipboardEvent) {\n    const pastedInput: string = event.clipboardData.getData('text/plain');\n    let pasted = false;\n    if (!this.decimal) {\n      pasted = document.execCommand(\n        'insertText',\n        false,\n        pastedInput.replace(/[^0-9]/g, '')\n      );\n    } else if (this.isValidDecimal(pastedInput)) {\n      pasted = document.execCommand(\n        'insertText',\n        false,\n        pastedInput.replace(/[^0-9.]/g, '')\n      );\n    }\n    if (pasted) {\n      event.preventDefault();\n    } else {\n      if (navigator.clipboard) {\n        navigator.clipboard.writeText(pastedInput);\n        document.execCommand('paste');\n      }\n    }\n  }\n\n  @HostListener('drop', ['$event'])\n  onDrop(event: DragEvent) {\n    const textData = event.dataTransfer.getData('text');\n    this.inputElement.focus();\n\n    let pasted = false;\n    if (!this.decimal) {\n      pasted = document.execCommand(\n        'insertText',\n        false,\n        textData.replace(/[^0-9]/g, '')\n      );\n    } else if (this.isValidDecimal(textData)) {\n      pasted = document.execCommand(\n        'insertText',\n        false,\n        textData.replace(/[^0-9.]/g, '')\n      );\n    }\n    if (pasted) {\n      event.preventDefault();\n    } else {\n      if (navigator.clipboard) {\n        navigator.clipboard.writeText(textData);\n        document.execCommand('paste');\n      }\n    }\n  }\n\n  isValidDecimal(str: string): boolean {\n    return str.split('.').length <= 2;\n  }\n}\n","import { Directive, ElementRef, HostListener, Output, EventEmitter } from '@angular/core';\n\n@Directive({\n  selector: '[gsClickOutside]'\n})\nexport class ClickOutsideDirective {\n  @Output('gsClickOutside') clickOutside: EventEmitter<any> = new EventEmitter();\n\n  constructor(private elementRef: ElementRef) { }\n\n  @HostListener('document:click', ['$event.target'])\n  onMouseEnter(targetElement) {\n    const clickedInside = this.elementRef.nativeElement.contains(targetElement);\n    if (!clickedInside) {\n      this.clickOutside.emit(null);\n    }\n  }\n}\n","import { GsButtonComponent } from './gs-fields/button/button.component';\nimport { NgModule, ModuleWithProviders, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { GStyles } from './gs-forms.models';\nimport { GsGenericFieldComponent } from './gs-fields/_generic-field/_generic-field.component';\nimport { DigitOnlyDirective } from './gs-directives/digit-only/digit-only.directive';\nimport { ClickOutsideDirective } from './gs-directives/click-outside/click-outside.directive';\nimport { GsTextInputComponent } from './gs-fields/text-input/text-input.component';\nimport { GsTextareaComponent } from './gs-fields/textarea/textarea.component';\nimport { GsPasswordInputComponent } from './gs-fields/password-input/password-input.component';\nimport { GsNumberInputComponent } from './gs-fields/number-input/number-input.component';\nimport { GsToggleComponent } from './gs-fields/toggle/toggle.component';\nimport { GsCheckboxComponent } from './gs-fields/checkbox/checkbox.component';\nimport { GsRadioButtonComponent } from './gs-fields/radio-button/radio-button.component';\nimport { GsDropdownComponent } from './gs-fields/dropdown/dropdown.component';\nimport { GsCurrencyInputComponent } from './gs-fields/currency-input/currency-input.component';\nimport { GsPhoneInputComponent } from './gs-fields/phone-input/phone-input.component';\nimport { GsDatePickerComponent } from './gs-fields/datepicker/datepicker.component';\nimport { GsSeparatedByCommaComponent } from './gs-fields/separated-by-comma/separated-by-comma.component';\nimport { GsFileInputComponent } from './gs-fields/file-input/file-input.component';\nimport { GsDividerComponent } from './gs-fields/divider/divider.component';\nimport { GsTwoDataInputComponent } from './gs-fields/two-data-input/two-data-input.component';\nimport { GsMultiselectComponent } from './gs-fields/multiselect/multiselect.component';\nimport { GsMapFieldComponent } from './gs-fields/map-field/map-field.component';\nimport { GsColorPickerComponent } from './gs-fields/color-picker/color-picker.component';\nimport { GsShowDataComponent } from './gs-fields/show-data/show-data.component';\nimport { GsTimePickerComponent } from './gs-fields';\nimport { GsFormComponent } from './gs-form.component';\nimport { GsFormsService } from './gs-forms.service';\n\nconst directive = [\n  DigitOnlyDirective,\n  ClickOutsideDirective,\n];\n\nconst widgets = [\n  GsGenericFieldComponent,\n  GsTextInputComponent,\n  GsTextareaComponent,\n  GsPasswordInputComponent,\n  GsNumberInputComponent,\n  GsToggleComponent,\n  GsCheckboxComponent,\n  GsRadioButtonComponent,\n  GsDropdownComponent,\n  GsCurrencyInputComponent,\n  GsPhoneInputComponent,\n  GsDatePickerComponent,\n  GsSeparatedByCommaComponent,\n  GsFileInputComponent,\n  GsDividerComponent,\n  GsTwoDataInputComponent,\n  GsMultiselectComponent,\n  GsColorPickerComponent,\n  GsMapFieldComponent,\n  GsTimePickerComponent,\n  GsButtonComponent,\n  GsShowDataComponent,\n  GsFormComponent\n];\n\n@NgModule({\n  declarations: [\n    ...directive,\n    ...widgets\n  ],\n  imports: [\n    CommonModule,\n    TranslateModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [\n    GsFormsService\n  ],\n  exports: [\n    ...directive,\n    ...widgets\n  ],\n  schemas: [\n    NO_ERRORS_SCHEMA\n  ]\n})\nexport class GsFormsModule {\n  public static forRoot(styles?: GStyles, googleMapApiKey?: string): ModuleWithProviders {\n    if (googleMapApiKey && !document.getElementById('google-map-script')) {\n      const googleScript = document.createElement('script');\n      googleScript.defer = true;\n      googleScript.async = true;\n      googleScript.id = 'google-map-script';\n      googleScript.type = 'text/javascript';\n      googleScript.src = `https://maps.googleapis.com/maps/api/js?key=${googleMapApiKey}&libraries=places`;\n      document.body.appendChild(googleScript);\n    }\n\n    return {\n      ngModule: GsFormsModule,\n      providers: [\n        {\n          provide: 'customStyles',\n          useValue: styles\n        },\n        {\n          provide: 'googleMapApiKey',\n          useValue: googleMapApiKey\n        }\n      ]\n    };\n  }\n}\n"]}