import { GFieldSelector } from './gs-forms.enums';
/**
 * Text widget
 */
export class GTextField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.TEXT;
    }
}
/**
 * Textarea widget
 */
export class GTextareaField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.TEXTAREA;
    }
}
/**
 * Password widget
 */
export class GPasswordField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.PASSWORD;
    }
}
/**
 * Number widget
 */
export class GNumberField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.NUMBER;
    }
}
/**
 * Toggle widget
 */
export class GToggleField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.TOGGLE;
    }
}
/**
 * Checkbox widget
 */
export class GCheckboxField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.CHECKBOX;
    }
}
/**
 * Radio widget
 */
export class GRadioField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.RADIO;
    }
}
/**
 * Dropdown widget
 */
export class GDropdownField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.DROPDOWN;
    }
}
/**
 * Tax document widget
 * @deprecated
 */
export class GTaxDocumentTypeField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.TAX_TYPE;
    }
}
/**
 * Currency widget
 */
export class GCurrencyField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.CURRENCY;
    }
}
/**
 * Phone widget
 */
export class GPhoneField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.PHONE;
    }
}
/**
 * Datepicker widget
 */
export class GDatePickerField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.DATE;
    }
}
/**
 * Separated by Comma widget
 */
export class GSeparatedByComma {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.COMMA;
    }
}
/**
 * Image/File widget
 */
export class GFieldFile {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.FILE;
    }
}
/**
 * Two data input widget
 */
export class GTwoDataInput {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.TWO_DATA;
    }
}
/**
 * Multiselect widget
 */
export class GMultiselectField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.MULTISELECT;
    }
}
/**
 * Color picker widget
 */
export class GColorPickerField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.COLOR;
    }
}
/**
 * Map widget
 */
export class GMapField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.MAP;
    }
}
/**
 * Time field in 24 hour format
 */
export class GTimeField {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.TIME;
    }
}
/**
 * Divider widget
 */
export class GDivider {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.DIVIDER;
        this.notWidget = true;
    }
}
/**
 * Button widget
 */
export class GButton {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.BUTTON;
        this.notWidget = true;
    }
}
/**
 * Show-data widget
 */
export class GShowData {
    constructor(config) {
        this.config = config;
        this.selector = GFieldSelector.SHOW_DATA;
        this.notWidget = true;
    }
}
//# sourceMappingURL=data:application/json;base64,